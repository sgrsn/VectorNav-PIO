
.. _program_listing_file_include_HAL_Thread_PC.hpp:

Program Listing for File Thread_PC.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_HAL_Thread_PC.hpp>` (``include\HAL\Thread_PC.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef HAL_THREAD_PC_HPP
   #define HAL_THREAD_PC_HPP
   
   #include <thread>
   #if (_WIN32)
   #define NOMINMAX 1
   #include "windows.h"
   #include "Debug.hpp"
   #endif
   #include "HAL/Thread_Base.hpp"
   // #include <Windows.h> // Necessary for priority
   
   namespace VN
   {
   
   class Thread : public Thread_Base
   {
   public:
       Thread() {};
       Thread(const Thread&) = delete;
   
       template <typename Callable, typename... Args>
       explicit Thread(Callable&& f, Args&&... args) : _thread(std::forward<Callable>(f), std::forward<Args>(args)...){};
   
       ~Thread() override
       {
           if (_thread.joinable()) { _thread.join(); }
       }
   
       void join() override final { _thread.join(); }
   
       void detach() override final { _thread.detach(); }
   
       bool joinable() const override final { return _thread.joinable(); }
   
       // void setHighestPriority() {
       //     if (_thread.joinable()) {
       //         std::cout << "joinable.\n";
       //     } else {
       //         std::cout << "Not joinable.\n";
       //         // Should be exception?
       //     }
       //     // HANDLE threadHandle = static_cast<HANDLE>(_thread.native_handle());
       //     // ThreadHandle_t threadHandle;
       //     // HANDLE threadHandle = (HANDLE*)(_thread.native_handle());
       //     auto threadHandle = _thread.native_handle();
       //     // HANDLE myHandle = OpenThread(THREAD_ALL_ACCESS, true, threadHandle);
       //     BOOL success = SetThreadPriority(threadHandle, THREAD_PRIORITY_HIGHEST);
       //     //https://stackoverflow.com/questions/62751283/windowswhy-does-stdthreadnative-handle-return-a-value-of-type-long-long-u if (!success) {
       //         DWORD lastError = GetLastError();
       //         // 6 is ERROR_INVALID_HANDLE
       //         throw(std::system_error(lastError, std::system_category(), "Error elevating thread priority"));
       //     }
       // }
   
   private:
       std::thread _thread;
   };
   
   namespace thisThread
   {
   inline void sleepFor(const Microseconds sleepDuration) noexcept
   {
       static bool _init = true;
       if (_init)
       {
   #if (_WIN32)
           // Set the global Windows timer resolution to 1ms (max resolution). Windows resets this at the close of the application
           // It doesn't guarantee a 1ms sleep will actually be 1ms, but seems to limit it to ~5ms.
           MMRESULT result = timeBeginPeriod(1);
           VN_ASSERT(result == TIMERR_NOERROR);
   #endif
           _init = false;
       }
       std::this_thread::sleep_for(sleepDuration);
   };
   }  // namespace thisThread
   
   }  // namespace VN
   #endif  // HAL_THREAD_PC_HPP
