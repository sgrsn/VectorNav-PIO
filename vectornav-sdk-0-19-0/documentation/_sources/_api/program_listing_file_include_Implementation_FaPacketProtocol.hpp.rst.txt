
.. _program_listing_file_include_Implementation_FaPacketProtocol.hpp:

Program Listing for File FaPacketProtocol.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_Implementation_FaPacketProtocol.hpp>` (``include\Implementation\FaPacketProtocol.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef IMPLEMENTATION_FAPACKETPROTOCOL_HPP
   #define IMPLEMENTATION_FAPACKETPROTOCOL_HPP
   
   #include <optional>
   
   #include "Config.hpp"
   #include "HAL/Timer.hpp"
   #include "Interface/CompositeData.hpp"
   #include "TemplateLibrary/ByteBuffer.hpp"
   #include "Implementation/BinaryHeader.hpp"
   #include "Implementation/PacketDispatcher.hpp"
   #include "Implementation/MeasurementDatatypes.hpp"
   
   namespace VN
   {
   namespace FaPacketProtocol
   {
   
   using Validity = PacketDispatcher::FindPacketRetVal::Validity;
   
   struct Metadata
   {
       BinaryHeader header;
       size_t length;
       time_point timestamp;
       bool operator==(const Metadata& other) const noexcept { return header == other.header && length == other.length; }
   };
   
   struct FindPacketReturn
   {
       Validity validity;
       Metadata metadata;
   };
   
   FindPacketReturn findPacket(const ByteBuffer& byteBuffer, const size_t syncByteIndex) noexcept;
   
   std::optional<CompositeData> parsePacket(const ByteBuffer& buffer, const size_t syncByteIndex, const Metadata& metadata,
                                            const EnabledMeasurements& measurementsToParse) noexcept;
   
   }  // namespace FaPacketProtocol
   
   class FaPacketExtractor
   {
   public:
       // Passed buffer must contain bytes enough for metadata.length
       FaPacketExtractor(const ByteBuffer& buffer, const FaPacketProtocol::Metadata& metadata, size_t offset = 0) : _buffer(buffer, offset), _metadata(metadata) {}
   
       FaPacketExtractor(uint8_t* buffer, const FaPacketProtocol::Metadata& metadata) : _buffer(buffer, metadata.length, metadata.length), _metadata(metadata) {}
   
       template <class T>
       T extract_unchecked() noexcept
       {
           size_t tmp = _index;
           _index += sizeof(T);
           return *reinterpret_cast<const T*>(_buffer.peek_linear_unchecked(tmp));
       }
   
       template <class T>
       bool extract(std::optional<T>& value) noexcept;
   
       template <size_t N, size_t M, class T>
       bool extract(std::optional<Matrix<N, M, T>>& value) noexcept;
   
       bool discard(const size_t numDiscard) noexcept
       {
           if ((_index + numDiscard) > _metadata.length) { return true; }
           _index += numDiscard;
           return false;
       }
   
       bool discard(const uint8_t group, const uint8_t field) noexcept
       {
           uint16_t numDiscard = 0;
           if ((group == 3 || group == 6) && (field == 14 || field == 16))
           {
               if (field == 14)
               {
                   const uint8_t numSats = _buffer.peek_unchecked(_index);
                   numDiscard += 2 + 10 * numSats;
               }
               else
               {
                   const uint8_t numMeas = _buffer.peek_unchecked(_index + 10);
                   numDiscard += 12 + 28 * numMeas;
               }
           }
           else
           {
               const auto size = getStaticBinaryTypeSize(group, field);
               if (!size.has_value()) { return true; }
               numDiscard = size.value();
           }
           return discard(numDiscard);
       }
   
       BinaryHeader header() const noexcept { return _metadata.header; };
       size_t length() const noexcept { return _metadata.length; };
   
       size_t index() const { return _index; }
   
   private:
       const ByteBuffer _buffer;
       const FaPacketProtocol::Metadata& _metadata;
       size_t _index = 0;
   };
   
   template <class T>
   bool FaPacketExtractor::extract(std::optional<T>& value) noexcept
   {
       T tmp;
       if (_buffer.peek(reinterpret_cast<uint8_t*>(&tmp), sizeof(T), _index)) { return true; }
       value = tmp;
       _index += sizeof(T);
       return false;
   }
   
   template <>
   inline bool FaPacketExtractor::extract(std::optional<Ypr>& value) noexcept
   {
       Ypr ypr;
       if (_buffer.peek(reinterpret_cast<uint8_t*>(&ypr), sizeof(ypr), _index)) { return true; }
       value = ypr;
       _index += sizeof(ypr);
       return false;
   }
   
   template <>
   inline bool FaPacketExtractor::extract(std::optional<DeltaTheta>& value) noexcept
   {
       DeltaTheta deltaTheta;
       if (_buffer.peek(reinterpret_cast<uint8_t*>(&deltaTheta), sizeof(deltaTheta), _index)) { return true; };
       value = deltaTheta;
       _index += sizeof(deltaTheta);
       return false;
   }
   
   template <>
   inline bool FaPacketExtractor::extract(std::optional<Lla>& value) noexcept
   {
       Lla lla;
       if (_buffer.peek(reinterpret_cast<uint8_t*>(&lla), sizeof(lla), _index)) { return true; };
       value = lla;
       _index += sizeof(lla);
       return false;
   }
   
   template <size_t N, size_t M, class T>
   bool FaPacketExtractor::extract(std::optional<Matrix<N, M, T>>& value) noexcept
   {
       Matrix<N, M, T> mat;
       if (_buffer.peek(reinterpret_cast<uint8_t*>(&mat), sizeof(T) * M * N, _index)) { return true; };
       value = mat;
       _index += sizeof(T) * M * N;
       return false;
   }
   
   template <>
   inline bool FaPacketExtractor::extract(std::optional<GnssSatInfo>& value) noexcept
   {
       GnssSatInfo satInfo;
   
       _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&satInfo.numSats), sizeof(satInfo.numSats), _index++);
       if (_index + 1 + 10 * satInfo.numSats > _metadata.length) { return true; }
   
       satInfo.resv = _buffer.peek_unchecked(_index++);
       for (size_t i = 0; i < satInfo.numSats; ++i)
       {
           satInfo.sys[i] = _buffer.peek_unchecked(_index++);
           satInfo.svId[i] = _buffer.peek_unchecked(_index++);
           satInfo.flags[i] = _buffer.peek_unchecked(_index++);
           satInfo.cno[i] = _buffer.peek_unchecked(_index++);
           satInfo.qi[i] = _buffer.peek_unchecked(_index++);
           satInfo.el[i] = static_cast<int8_t>(_buffer.peek_unchecked(_index++));
           _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&satInfo.az[i]), 2, _index);
           _index += 2;
       }
   
       value = satInfo;
       return false;
   }
   
   template <>
   inline bool FaPacketExtractor::extract(std::optional<GnssRawMeas>& value) noexcept
   {
       GnssRawMeas rawMeas;
   
       _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.tow), sizeof(rawMeas.tow), _index);
       _index += sizeof(rawMeas.tow);
       _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.week), sizeof(rawMeas.week), _index);
       _index += sizeof(rawMeas.week);
       _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.numMeas), sizeof(rawMeas.numMeas), _index++);
       if (_index + 1 + 28 * rawMeas.numMeas > _metadata.length) { return true; }
   
       rawMeas.resv = _buffer.peek_unchecked(_index++);
       for (size_t i = 0; i < rawMeas.numMeas; ++i)
       {
           rawMeas.sys[i] = _buffer.peek_unchecked(_index++);
           rawMeas.svId[i] = _buffer.peek_unchecked(_index++);
           rawMeas.band[i] = _buffer.peek_unchecked(_index++);
           rawMeas.chan[i] = _buffer.peek_unchecked(_index++);
           rawMeas.freqNum[i] = _buffer.peek_unchecked(_index++);
           rawMeas.cno[i] = static_cast<int8_t>(_buffer.peek_unchecked(_index++));
           _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.flags[i]), sizeof(uint16_t), _index);
           _index += sizeof(uint16_t);
           _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.pr[i]), sizeof(double), _index);
           _index += sizeof(double);
           _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.cp[i]), sizeof(double), _index);
           _index += sizeof(double);
           _buffer.peek_unchecked(reinterpret_cast<uint8_t*>(&rawMeas.dp[i]), sizeof(float), _index);
           _index += sizeof(float);
       }
   
       value = rawMeas;
       return false;
   }
   
   }  // namespace VN
   
   #endif  // IMPLEMENTATION_FAPACKETPROTOCOL_HPP
