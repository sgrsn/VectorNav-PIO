
.. _program_listing_file_include_HAL_File_PC.hpp:

Program Listing for File File_PC.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_HAL_File_PC.hpp>` (``include\HAL\File_PC.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef HAL_FILE_PC_HPP
   #define HAL_FILE_PC_HPP
   
   #include <fstream>
   #include <ios>
   #include <filesystem>
   #include "HAL/File_Base.hpp"
   #include "TemplateLibrary/String.hpp"
   
   namespace VN
   {
   
   namespace Filesystem
   {
   inline bool exists(const FilePath& filePath) noexcept { return std::filesystem::exists(filePath.c_str()); }
   }  // namespace Filesystem
   
   inline Filesystem::FilePath operator/(Filesystem::FilePath lhs, const char* rhs) { return Filesystem::FilePath(lhs + "/" + rhs); }
   
   class InputFile : public InputFile_Base
   {
   public:
       InputFile(const bool nullTerminateRead = false) : _nullTerminateRead(nullTerminateRead) {};
       InputFile(const Filesystem::FilePath& filePath, const bool nullTerminateRead = false)
           : _file(filePath, std::ios::binary), _nullTerminateRead(nullTerminateRead) {};
   
       virtual ~InputFile() {};
   
       InputFile& operator=(InputFile&& rhs) noexcept
       {
           if (this != &rhs) { _file = std::move(rhs._file); }
           return *this;
       }
   
       virtual bool open(const Filesystem::FilePath& filePath) override final
       {
           if (!_file.is_open() && !std::filesystem::exists(filePath.c_str())) { return true; }
   
           _file.open(filePath.c_str(), std::ios_base::binary);
           return !_file.good();
       }
   
       virtual void close() override final { _file.close(); };
   
       virtual bool read(char* buffer, const size_t count) override final
       {
           if (!_file.is_open() || !_file.good())
           {
               buffer[0] = '\0';
               return true;
           };
           if (_nullTerminateRead)
           {
               _file.read(buffer, count - 1);
               buffer[_file.gcount()] = '\0';
           }
           else { _file.read(buffer, count); }
           return !_file.good();
       }
   
       virtual bool getLine(char* buffer, const size_t capacity) override final
       {
           if (!_file.is_open() || !_file.good())
           {
               buffer[0] = '\0';
               return true;
           };
           _file.getline(buffer, capacity, '\n');
   
           // To make it cross-compatible, strip off \r if it is ending the file
           if (buffer[_file.gcount() - 2] == '\r') { buffer[_file.gcount() - 2] = '\0'; }
   
           return !_file.good();
       }
   
       virtual bool is_open() const override final { return _file.is_open(); };
   
       virtual void reset() override final
       {
           _file.clear();
           _file.seekg(0, std::ios::beg);
       }
   
   private:
       std::ifstream _file;
       bool _nullTerminateRead;
   };
   
   class OutputFile : public OutputFile_Base
   {
   public:
       OutputFile() {};
       OutputFile(const Filesystem::FilePath& filePath) : _file(filePath, std::ios::binary) {};
   
       virtual ~OutputFile() {};
   
       OutputFile(const OutputFile&) = delete;
       OutputFile operator=(const OutputFile&) = delete;
   
       OutputFile(OutputFile&& rhs) : _file(std::move(rhs._file)) {}
   
       OutputFile& operator=(OutputFile&& rhs) noexcept
       {
           if (this != &rhs) { _file = std::move(rhs._file); }
           return *this;
       }
   
       virtual bool open(const Filesystem::FilePath& filePath) override final
       {
           _file.open(filePath.c_str(), std::ios_base::binary | std::ios_base::trunc);
           return !_file.good();
       }
   
       virtual void close() override final { _file.close(); };
   
       virtual bool write(const char* buffer, const size_t count) override final
       {
           if (!_file.is_open() && !_file.good()) { return true; };
           _file.write(buffer, count);
           return !_file.good();
       }
   
       virtual bool write(const char* buffer) override final { return write(buffer, std::strlen(buffer)); }
   
       virtual bool writeLine(const char* buffer, const size_t count) override final
       {
           if (write(buffer, count)) { return true; }
           return write("\n", 1);
       }
   
       virtual bool writeLine(const char* buffer) override final { return writeLine(buffer, std::strlen(buffer)); }
   
       virtual bool is_open() const override final { return _file.is_open(); }
   
       virtual void reset() override final
       {
           _file.clear();
           _file.seekp(0, std::ios::beg);
       }
   
   private:
       std::ofstream _file;
   };
   
   }  // namespace VN
   
   #endif  // HAL_FILE_PC_HPP
