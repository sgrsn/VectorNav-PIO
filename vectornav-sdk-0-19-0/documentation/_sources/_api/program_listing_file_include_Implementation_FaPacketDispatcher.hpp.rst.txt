
.. _program_listing_file_include_Implementation_FaPacketDispatcher.hpp:

Program Listing for File FaPacketDispatcher.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_Implementation_FaPacketDispatcher.hpp>` (``include\Implementation\FaPacketDispatcher.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef IMPLEMENTATION_FAPACKETDISPATCHER_HPP
   #define IMPLEMENTATION_FAPACKETDISPATCHER_HPP
   
   #include <cstdint>
   #include <functional>
   #include <optional>
   #include <limits>
   
   #include "TemplateLibrary/ByteBuffer.hpp"
   #include "TemplateLibrary/Vector.hpp"
   #include "Implementation/PacketDispatcher.hpp"
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Implementation/QueueDefinitions.hpp"
   #include "Implementation/BinaryHeader.hpp"
   #include "Config.hpp"
   
   namespace VN
   {
   
   class FaPacketDispatcher : public PacketDispatcher
   {
   public:
       FaPacketDispatcher(MeasurementQueue* measurementQueue, EnabledMeasurements enabledMeasurements)
           : PacketDispatcher({0xFA}), _compositeDataQueue(measurementQueue), _enabledMeasurements(enabledMeasurements)
       {
       }
   
       PacketDispatcher::FindPacketRetVal findPacket(const ByteBuffer& byteBuffer, const size_t syncByteIndex) noexcept override;
   
       void dispatchPacket(const ByteBuffer& byteBuffer, const size_t syncByteIndex) noexcept override;
   
       enum class SubscriberFilterType
       {
           ExactMatch,
           AnyMatch,
           NotExactMatch
       };
   
       bool addSubscriber(PacketQueue_Interface* subscriber, EnabledMeasurements headerToUse, SubscriberFilterType filterType) noexcept;
   
       void removeSubscriber(PacketQueue_Interface* subscriberToRemove) noexcept;
       void removeSubscriber(PacketQueue_Interface* subscriberToRemove, const EnabledMeasurements& headerToUse) noexcept;
   
   protected:
       struct Subscriber
       {
           PacketQueue_Interface* queueToPush;
           EnabledMeasurements headerFilter;
           SubscriberFilterType filterType;
       };
   
       static const auto SUBSCRIBER_CAPACITY = Config::PacketDispatchers::faPacketSubscriberCapacity;
       using Subscribers = Vector<Subscriber, SUBSCRIBER_CAPACITY>;
       Subscribers _subscribers;
   
       MeasurementQueue* _compositeDataQueue;
       EnabledMeasurements _enabledMeasurements;
       FaPacketProtocol::Metadata _latestPacketMetadata;
   
       bool _tryPushToCompositeDataQueue(const ByteBuffer& byteBuffer, const size_t syncByteIndex, const FaPacketProtocol::Metadata& packetDetails) noexcept;
       void _invokeSubscribers(const ByteBuffer& byteBuffer, const size_t syncByteIndex, const FaPacketProtocol::Metadata& packetDetails) noexcept;
       bool _tryPushToSubscriber(const ByteBuffer& byteBuffer, const size_t syncByteIndex, const FaPacketProtocol::Metadata& packetDetails,
                                 Subscriber& subscriber) noexcept;
   };
   
   }  // namespace VN
   
   #endif  // IMPLEMENTATION_FAPACKETDISPATCHER_HPP
