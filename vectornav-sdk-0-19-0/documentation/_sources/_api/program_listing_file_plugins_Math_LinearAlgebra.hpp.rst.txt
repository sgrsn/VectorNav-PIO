
.. _program_listing_file_plugins_Math_LinearAlgebra.hpp:

Program Listing for File LinearAlgebra.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_Math_LinearAlgebra.hpp>` (``plugins\Math\LinearAlgebra.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef LINEARALGEBRA_HPP
   #define LINEARALGEBRA_HPP
   
   #include <algorithm>
   #include <cassert>
   #include <cstddef>
   #include <initializer_list>
   #include <cmath>
   #include <array>
   #include <limits>
   #include <complex>
   #include "TemplateLibrary/Matrix.hpp"
   #include "MatrixMath.hpp"
   #include "Implementation/MeasurementDatatypes.hpp"
   #include <numeric>
   
   #include "Debug.hpp"
   
   namespace VN
   {
   
   namespace LinAlg
   {
   
   // Vector math
   template <typename T, typename S>
   T dot(const Matrix<3, 1, T>& lhs, const Matrix<3, 1, S>& rhs)
   {
       return lhs[0] * rhs[0] + lhs[1] * rhs[1] + lhs[2] * rhs[2];
   }
   
   template <typename T, typename S>
   T dot(const Matrix<4, 1, T>& lhs, const Matrix<4, 1, S>& rhs)
   {
       return lhs[0] * rhs[0] + lhs[1] * rhs[1] + lhs[2] * rhs[2] + lhs[3] * rhs[3];
   }
   
   template <size_t m, typename T, typename S>
   T dot(const Matrix<m, 1, T>& lhs, const Matrix<m, 1, S>& rhs)
   {
       T sum = 0;
       for (size_t i = 0; i < m; i++) { sum += lhs[i] * rhs[i]; }
       return sum;
   }
   
   template <typename T>
   Matrix<3, 1, T> cross(const Matrix<3, 1, T>& lhs, const Matrix<3, 1, T>& rhs)
   {
       Matrix<3, 1, T> retMatrix;
       retMatrix[0] = lhs(1) * rhs(2) - lhs(2) * rhs(1);
       retMatrix[1] = lhs(2) * rhs(0) - lhs(0) * rhs(2);
       retMatrix[2] = lhs(0) * rhs(1) - lhs(1) * rhs(0);
       return retMatrix;
   }
   
   // If non-invertable it will return an identity matrix
   template <size_t n, typename T>
   Matrix<n, n, T> inverse(const Matrix<n, n, T>& mat)
   {
       Matrix<n, n, T> ac = mat;
       Matrix<n, n, T> inverse;
   
       size_t i, j, iPass, imx, icol, irow;
       T det = 1;
       T temp, pivot, factor;
   
       for (i = 0; i < n; i++)
       {
           for (j = 0; j < n; j++) { inverse(i, j) = 0; }
           inverse(i, i) = 1;
       }
   
       for (iPass = 0; iPass < n; iPass++)
       {
           imx = iPass;
           for (irow = iPass; irow < n; irow++)
           {
               if (std::abs(ac(irow, iPass)) > std::abs(ac(imx, iPass))) { imx = irow; }
           }
   
           if (imx != iPass)
           {
               for (icol = 0; icol < n; icol++)
               {
                   temp = inverse(iPass, icol);
                   inverse(iPass, icol) = inverse(imx, icol);
                   inverse(imx, icol) = temp;
                   if (icol >= iPass)
                   {
                       temp = ac(iPass, icol);
                       ac(iPass, icol) = ac(imx, icol);
                       ac(imx, icol) = temp;
                   }
               }
           }
   
           pivot = ac(iPass, iPass);
           det = det * pivot;
   
           if (std::abs(det) < std::numeric_limits<T>::epsilon())
           {
               return Matrix<n, n, T>::null();  // Matrix is not invertible
           }
   
           for (icol = 0; icol < n; icol++)
           {
               inverse(iPass, icol) = inverse(iPass, icol) / pivot;
               if (icol >= iPass) { ac(iPass, icol) = ac(iPass, icol) / pivot; }
           }
   
           for (irow = 0; irow < n; irow++)
           {
               if (irow != iPass)
               {
                   factor = ac(irow, iPass);
                   for (icol = 0; icol < n; icol++)
                   {
                       if (irow != iPass)
                       {
                           inverse(irow, icol) -= factor * inverse(iPass, icol);
                           ac(irow, icol) -= factor * ac(iPass, icol);
                       }
                   }
               }
           }
       }
   
       return inverse;  // Matrix inversion successful
   }
   
   template <typename T>
   Matrix<2, 2, T> inverse(const Matrix<2, 2, T>& mat)
   {
       Matrix<2, 2, T> nm({mat[3], -mat[1], -mat[2], mat[0]});
   
       T det = mat[0] * mat[3] - mat[1] * mat[2];
   
       if (std::abs(det) < 10 * std::numeric_limits<T>::epsilon()) { return Matrix<2, 2, T>::null(); }
   
       T invDet = 1 / det;
       return nm * invDet;
   }
   
   template <size_t n, typename T>
   Matrix<n, 1, T> solveLinearSystemLU(Matrix<n, n, T> U, const Matrix<n, 1, T>& b)
   {
       T det = 1.0;
       auto L = Matrix<n, n, T>();
       auto ri = std::array<int, n>();
       std::iota(ri.begin(), ri.end(), 0);
       Matrix<n, 1, T> x;
   
       // i indicates which column (from ri) we are reducing
       // LU Decomposition
       for (size_t i = 0; i < n - 1; i++)
       {
           // find row to pivot
           T pivot = 0;
           int row = 0;
   
           for (size_t j = i; j < n; j++)
           {
               T tmp = U(ri[j], i);
               if (std::fabs(pivot) < std::fabs(tmp))
               {
                   row = j;
                   pivot = tmp;
               }
           }
   
           det *= pivot;
           if (std::fabs(det) < 10 * std::numeric_limits<T>::epsilon()) { return x; }
   
           // keep track of pivot rows
           if (ri[i] != ri[row])
           {
               det = -det;
               std::swap(ri[i], ri[row]);
           }
   
           // Reduce columns to zero
           for (size_t j = i + 1; j < n; j++)
           {
               T c = -U(ri[j], i) / pivot;
               L(ri[j], i) = -c;
               for (size_t k = i; k < n; k++) { U(ri[j], k) += (c * U(ri[i], k)); }
           }
       }
   
       det *= U(ri[n - 1], n - 1);
       if (std::fabs(det) < 10 * std::numeric_limits<T>::epsilon()) { return x; }
   
       // solve Ly = Pb via forward sub
       for (int i = 0; i < static_cast<int>(n); i++)
       {
           x[i] = b[ri[i]];
           for (int j = 0; j < i; j++) { x[i] -= x[j] * L(ri[i], j); }
       }
   
       // solve Ux = y via backward sub
       for (int i = n - 1; i >= 0; i--)
       {
           for (int j = n - 1; j > i; j--) { x[i] -= x[j] * U(ri[i], j); }
           x[i] /= U(ri[i], i);
       }
   
       return x;
   }
   
   template <size_t m, size_t n, typename T>
   Matrix<n, m, T> transpose(const Matrix<m, n, T>& mat)
   {
       Matrix<n, m, T> nm;
   
       for (size_t row = 0; row < m; row++)
       {
           for (size_t col = 0; col < n; col++) { nm(col, row) = mat(row, col); }
       }
   
       return nm;
   }
   
   template <size_t m, size_t n, typename T>
   Matrix<n, 1, T> solveLinearLeastSquares(Matrix<m, n, T> A, const Matrix<m, 1, T>& y)
   {
       return solveLinearSystemLU(transpose(A) * A, transpose(A) * y);
   }
   
   template <typename T>
   Matrix<3, 3, T> inverse(const Matrix<3, 3, T>& mat)
   {
       Matrix<3, 3, T> nm;
       T det = mat(0, 0) * (mat(1, 1) * mat(2, 2) - mat(2, 1) * mat(1, 2)) - mat(0, 1) * (mat(1, 0) * mat(2, 2) - mat(1, 2) * mat(2, 0)) +
               mat(0, 2) * (mat(1, 0) * mat(2, 1) - mat(1, 1) * mat(2, 0));
   
       if (std::abs(det) < std::numeric_limits<T>::epsilon()) { return Matrix<3, 3, T>::null(); }
   
       T invDet = 1 / det;
   
       nm(0, 0) = (mat(1, 1) * mat(2, 2) - mat(2, 1) * mat(1, 2)) * invDet;
       nm(0, 1) = (mat(0, 2) * mat(2, 1) - mat(0, 1) * mat(2, 2)) * invDet;
       nm(0, 2) = (mat(0, 1) * mat(1, 2) - mat(0, 2) * mat(1, 1)) * invDet;
       nm(1, 0) = (mat(1, 2) * mat(2, 0) - mat(1, 0) * mat(2, 2)) * invDet;
       nm(1, 1) = (mat(0, 0) * mat(2, 2) - mat(0, 2) * mat(2, 0)) * invDet;
       nm(1, 2) = (mat(1, 0) * mat(0, 2) - mat(0, 0) * mat(1, 2)) * invDet;
       nm(2, 0) = (mat(1, 0) * mat(2, 1) - mat(2, 0) * mat(1, 1)) * invDet;
       nm(2, 1) = (mat(2, 0) * mat(0, 1) - mat(0, 0) * mat(2, 1)) * invDet;
       nm(2, 2) = (mat(0, 0) * mat(1, 1) - mat(1, 0) * mat(0, 1)) * invDet;
   
       return nm;
   }
   
   inline Quat multiplyQuat(const Quat& q0, const Quat& q1)
   {
       const auto retVal = Quat{
           {
               q0.scalar * q1.vector[0] + q0.vector[0] * q1.scalar + q0.vector[1] * q1.vector[2] - q0.vector[2] * q1.vector[1],
               q0.scalar * q1.vector[1] - q0.vector[0] * q1.vector[2] + q0.vector[1] * q1.scalar + q0.vector[2] * q1.vector[0],
               q0.scalar * q1.vector[2] + q0.vector[0] * q1.vector[1] - q0.vector[1] * q1.vector[0] + q0.vector[2] * q1.scalar,
           },
           q0.scalar * q1.scalar - LinAlg::dot(q0.vector, q1.vector),
       };
   
       return retVal;
   }
   
   inline Quat inverseQuat(const Quat& q) { return Quat{{q.vector * -1}, q.scalar}; }
   
   template <typename T>
   T sign(T val)
   {
       return (T(0) < val) - (val < T(0));
   }
   
   template <typename T>
   Matrix<3, 3, T> skew(const Matrix<3, 1, T>& vec)
   {
       return {0, -vec[2], vec[1], vec[2], 0, -vec[0], -vec[1], vec[0], 0};
   }
   
   template <size_t m, typename T>
   T norm(const Matrix<m, 1, T>& mat)
   {
       return std::sqrt(dot(mat, mat));
   }
   
   inline Quat normalizeQuat(const Quat& quat)
   {
       float scale = sign(quat.scalar) * norm(*reinterpret_cast<const Vec4f*>(&quat));
       return Quat{
           quat.vector / scale,
           quat.scalar / scale,
       };
   }
   
   template <size_t m, typename T>
   Matrix<m, 1, T> normalize(Matrix<m, 1, T>& mat)
   {
       return mat / norm(mat);
   }
   
   inline Quat PropagateQuat(Quat q0, Vec3f dTheta)
   {
       const float normdT = LinAlg::norm(dTheta);
       const float phi = 0.5 * normdT;
       const float cosPhi = std::cos(phi);
       const Vec3f psi = std::sin(phi) * dTheta / normdT;
   
       Mat4f omega{{
           cosPhi, psi[2], -psi[1], psi[0],
           -psi[2], cosPhi, psi[0], psi[1],
           psi[1], -psi[0], cosPhi, psi[2],
           -psi[0], -psi[1], -psi[2], cosPhi,
       }};
   
       Vec4f vec{q0.vector(0), q0.vector(1), q0.vector(2), q0.scalar};
       Quat q = Quat(omega * vec);
   
       return LinAlg::normalizeQuat(q);
   }
   
   template <size_t m, typename T>
   Matrix<m, m, T> outer(const Matrix<m, 1, T>& lhs)
   {
       Matrix<m, m, T> retMatrix;
       return lhs * LinAlg::transpose(lhs);
   }
   class EigenDecomposition
   {
       static constexpr double _MACH_EPS = std::numeric_limits<double>::epsilon();
   
   public:
       EigenDecomposition() : _maxIter{50} {}
       EigenDecomposition(int maxIter) : _maxIter{maxIter} {}
   
       template <size_t m, typename T>
       bool computeDecomposition(Matrix<m, m, T>& mat, Matrix<m, 1, T>& eigenValuesR, Matrix<m, 1, T>& eigenValuesI, Matrix<m, m, T>& eigenVectors)
       {
           if (m < 1) return true;  // Returned an error
   
           // Case where m = 1
           if (m == 1)
           {
               eigenVectors(0, 0) = static_cast<T>(1.0);
               eigenValuesR = Matrix<m, 1, T>{mat(0, 0)};
               eigenValuesI = Matrix<m, 1, T>{0.0};
               return false;
           }
   
           // Case where m > 1
           Matrix<m, 1, int> count(0);  // Initialize iteration counter
           Matrix<m, 1, T> scale(0.0);
           size_t low{0}, high{0};
           if (balanceMatrix(mat, scale, low, high)) return true;
   
           if (computeUpperHessenberg(mat, count, low, high)) return true;
   
           if (transformToUpperHessenberg(mat, count, low, high, eigenVectors)) return true;
   
           if (computeEigenValuesAndVectors(mat, count, eigenValuesR, eigenValuesI, eigenVectors, low, high)) return true;
   
           if (undoBalance(eigenVectors, scale, low, high)) return true;
   
           if (normalizeEigenVectors(eigenVectors, eigenValuesI)) return true;
   
           // while loop in n_eigeng
           size_t j{0};
           while (j < m)
           {
               T temp = static_cast<T>(0.0);
               if (eigenValuesI(j) < _MACH_EPS)
               {
                   for (size_t i{0}; i < m; ++i) temp += eigenVectors(i, j) * eigenVectors(i, j);
                   temp = std::sqrt(temp);
                   for (size_t i{0}; i < m; ++i) eigenVectors(i, j) /= temp;
               }
               else
               {
                   for (size_t i{0}; i < m; ++i) temp += eigenVectors(i, j) * eigenVectors(i, j);
                   for (size_t i{0}; i < m; ++i) temp += eigenVectors(i, j + 1) * eigenVectors(i, j + 1);
                   temp = std::sqrt(temp);
                   for (size_t i{0}; i < m; ++i) eigenVectors(i, j) /= temp;
                   for (size_t i{0}; i < m; ++i) eigenVectors(i, j + 1) /= temp;
                   ++j;
               }
               ++j;
           }
   
           return false;
       }
   
   protected:
       template <size_t m, typename T>
       bool balanceMatrix(Matrix<m, m, T>& mat, Matrix<m, 1, T>& scale, size_t& low, size_t& high)
       {
           int basis = computeBasis();
           T basisSquared = static_cast<T>(basis * basis);
           size_t n{0};
           size_t k{m - 1};
           size_t k0{m - 1};
   
           bool iter;
           do {
               size_t j;
               iter = false;
               for (size_t j_{0}; j_ <= k0; ++j_)
               {
                   j = k0 - j_;
                   T r{0};
                   for (size_t i{0}; i <= k; ++i)
                       if (i != j) r += std::abs(mat(j, i));
   
                   if (r == static_cast<T>(0.0))
                   {
                       scale[k] = static_cast<T>(j);
                       if (j != k)
                       {
                           for (size_t i{0}; i <= k; ++i) std::swap(mat(i, j), mat(i, k));
                           for (size_t i{n}; i < m; ++i) std::swap(mat(j, i), mat(k, i));
                       }
                       --k;
                       iter = true;
                   }
               }
           } while (iter);
   
           do {
               iter = false;
               for (size_t j{n}; j <= k; ++j)
               {
                   T c{0};
                   for (size_t i{n}; i <= k; ++i)
                       if (i != j) c += std::abs(mat(i, j));
                   if (c == 0)
                   {
                       scale[n] = static_cast<T>(j);
                       if (j != m)
                       {
                           for (size_t i{0}; i <= k; ++i) std::swap(mat(i, j), mat(i, n));
                           for (size_t i{n}; i < m; ++i) std::swap(mat(j, i), mat(n, i));
                       }
                       ++n;
                       iter = true;
                   }
               }
           } while (iter);
   
           low = n;
           high = k;
           for (size_t i{n}; i != m; ++i) scale[i] = static_cast<T>(1.0);
   
           T g, f, s;
           do {
               iter = false;
               for (size_t i{n}; i <= k; ++i)
               {
                   T c{0.0}, r{0.0};
                   for (size_t j{n}; j <= k; ++j)
                   {
                       if (j != i)
                       {
                           c += std::abs(mat(j, i));
                           r += std::abs(mat(i, j));
                       }
                   }
                   g = r / basis;
                   f = static_cast<T>(1.0);
                   s = c + r;
   
                   while (c < g)
                   {
                       f *= basis;
                       c *= basisSquared;
                   }
   
                   g = r * basis;
                   while (c >= g)
                   {
                       f /= basis;
                       c /= basisSquared;
                   }
   
                   if ((c + r) / f < static_cast<T>(0.95) * s)
                   {
                       g = static_cast<T>(1.0) / f;
                       scale[i] *= f;
                       iter = true;
                       for (size_t j{n}; j < m; ++j) mat(i, j) *= g;
                       for (size_t j{0}; j <= k; ++j) mat(j, i) *= f;
                   }
               }
           } while (iter);
   
           return false;
       }
   
       template <size_t m, typename T>
       bool undoBalance(Matrix<m, m, T>& mat, Matrix<m, 1, T>& scale, size_t low, size_t high)
       {
           for (size_t i{low}; i <= high; ++i)
           {
               const float s = scale(i);
               for (size_t j{0}; j < m; ++j) mat(i, j) *= s;
           }
   
           for (size_t i_{0}; i_ != low; ++i_)
           {
               const size_t i = low - i_ - 1;
               const size_t k = static_cast<size_t>(scale(i));
               if (k != i)
                   for (size_t j{0}; j < m; ++j) std::swap(mat(i, j), mat(k, j));
           }
   
           for (size_t i{high + 1}; i < m; ++i)
           {
               const size_t k = static_cast<size_t>(scale(i));
               for (size_t j{0}; j < m; ++j) std::swap(mat(i, j), mat(k, j));
           }
   
           return false;
       }
   
       template <size_t m, typename T>
       bool computeUpperHessenberg(Matrix<m, m, T>& mat, Matrix<m, 1, int>& count, size_t low, size_t high)
       {
           if (low > m || high > m) return true;  // Zero matrix
   
           size_t i, j, n;
           float x, y;
           for (n = low + 1; n < high; ++n)
           {
               i = n;
               x = 0.0;
               for (j = n; j <= high; ++j)
               {
                   if (std::abs(mat(j, n - 1)) > std::abs(x))
                   {
                       x = mat(j, n - 1);
                       i = j;
                   }
               }
   
               count[n] = i;
               if (i != n)
               {
                   for (j = n - 1; j < m; ++j) std::swap(mat(i, j), mat(n, j));
                   for (j = 0; j <= high; ++j) std::swap(mat(j, i), mat(j, n));
               }
   
               if (x != 0.0)
               {
                   for (i = n + 1; i <= high; ++i)
                   {
                       y = mat(i, n - 1);
                       if (y != 0.0)
                       {
                           y = mat(i, n - 1) = y / x;
                           for (j = n; j < m; ++j) mat(i, j) -= y * mat(n, j);
                           for (j = 0; j <= high; ++j) mat(j, n) += y * mat(j, i);
                       }
                   }  // end i
               }
           }  // end m
   
           return false;
       }
   
       template <size_t m, typename T>
       bool transformToUpperHessenberg(const Matrix<m, m, T>& mat, const Matrix<m, 1, int>& count, size_t low, size_t high, Matrix<m, m, T>& hes)
       {
           hes = Matrix<m, m, T>::identity();
   
           size_t j;
           for (size_t i_{low + 1}; i_ != high; ++i_)
           {
               size_t i = high - i_;
               j = count(i);
               for (size_t k{i + 1}; k <= high; ++k) hes(k, i) = mat(k, i - 1);
   
               if (i != j)
               {
                   for (size_t k{i}; k <= high; ++k)
                   {
                       hes(i, k) = hes(j, k);
                       hes(j, k) = static_cast<T>(0.0);
                   }
                   hes(j, i) = static_cast<T>(1.0);
               }
           }
   
           return false;
       }
   
       template <size_t m, typename T>
       bool computeEigenValuesAndVectors(Matrix<m, m, T>& hes, Matrix<m, 1, int>& count, Matrix<m, 1, T>& eigenValuesR, Matrix<m, 1, T>& eigenValuesI,
                                         Matrix<m, m, T>& eigenVectors, size_t low, size_t high)
       {
           // Compute eigenvalues and vectors using Francis QR algorithm
           for (size_t i{0}; i != m; ++i)
           {
               if (i < low || i > high)
               {
                   eigenValuesR(i) = hes(i, i);
                   eigenValuesI(i) = static_cast<T>(0.0);
                   count(i) = 0;
               }
           }
   
           int iter;
           size_t en{high}, na, l, j, n{0};
           T t{0.0}, x, y, w;
           T p{0.0}, q{0.0}, z{0.0}, r{0.0}, s{0.0};
           while (en >= low && en <= m)
           {
               iter = 0;
               na = en - 1;
               while (true)
               {
                   // search for small subdiagonal element
                   size_t l_;
                   for (l_ = low; l_ < en; ++l_)
                   {
                       l = en + low - l_;
                       if (std::abs(hes(l, l - 1)) <= _MACH_EPS * (std::abs(hes(l - 1, l - 1)) + std::abs(hes(l, l)))) break;
                   }
                   l = en + low - l_;
   
                   x = hes(en, en);
                   if (l == en)
                   {  // Found one eigen value
                       eigenValuesR(en) = hes(en, en) = x + t;
                       eigenValuesI(en) = static_cast<T>(0.0);
                       count(en) = iter;
                       --en;
                       break;
                   }
   
                   y = hes(na, na);
                   w = hes(en, na) * hes(na, en);
   
                   if (l == na)
                   {  // Found two eigen values
                       p = (y - x) / 2.0;
                       q = p * p + w;
                       z = std::sqrt(std::abs(q));
                       x = hes(en, en) = x + t;
                       hes(na, na) = y + t;
                       count(en) = -iter;
                       count(na) = iter;
                       if (q >= static_cast<T>(0.0))
                       {  // Real part of eigen value
                           z = p < static_cast<T>(0.0) ? p - z : p + z;
                           eigenValuesR(na) = x + z;
                           eigenValuesR(en) = s = x - w / z;
                           eigenValuesI(na) = eigenValuesI(en) = static_cast<T>(0.0);
                           x = hes(en, na);
                           r = std::sqrt(x * x + z * z);
   
                           // Compute eigen vector
                           p = x / r;
                           q = z / r;
                           for (size_t j{na}; j < m; ++j)
                           {
                               z = hes(na, j);
                               hes(na, j) = q * z + p * hes(en, j);
                               hes(en, j) = q * hes(en, j) - p * z;
                           }
   
                           for (size_t i{0}; i <= en; ++i)
                           {
                               z = hes(i, na);
                               hes(i, na) = q * z + p * hes(i, en);
                               hes(i, en) = q * hes(i, en) - p * z;
                           }
   
                           for (size_t i{low}; i <= high; ++i)
                           {
                               z = eigenVectors(i, na);
                               eigenVectors(i, na) = q * z + p * eigenVectors(i, en);
                               eigenVectors(i, en) = q * eigenVectors(i, en) - p * z;
                           }
                       }
                       else
                       {
                           eigenValuesR(na) = eigenValuesR(en) = x + p;
                           eigenValuesI(na) = z;
                           eigenValuesI(en) = -z;
                       }
   
                       en -= 2;
                       break;
                   }  // end if l == na
   
                   if (iter >= _maxIter)
                   {
                       count(en) = _maxIter + 1;
                       return true;  // reached max iterations
                   }
   
                   if (iter != 0 && iter % 10 == 0)
                   {
                       t += x;
                       for (size_t i{low}; i <= en; ++i) hes(i, i) -= x;
                       s = std::abs(hes(en, na)) + std::abs(hes(na, en - 2));
                       x = y = static_cast<T>(0.75) * s;
                       w = static_cast<T>(-0.4375) * s * s;
                   }
   
                   ++iter;
   
                   for (size_t n_{l + 1}; n_ <= en - 1; ++n_)
                   {
                       n = en - 1 - n_;
                       z = hes(n, n);
                       r = x - z;
                       s = y - z;
                       p = (r * s - w) / hes(n + 1, n) + hes(n, n + 1);
                       q = hes(n + 1, n + 1) - z - r - s;
                       r = hes(n + 2, n + 1);
                       s = std::abs(p) + std::abs(q) + std::abs(r);
                       p /= s;
                       q /= s;
                       r /= s;
                       if (n == l) break;
                       if (n == 0) return true;
                       if (std::abs(hes(n, n - 1)) * (std::abs(q) + std::abs(r)) <=
                           _MACH_EPS * std::abs(p) * (std::abs(hes(n - 1, n - 1)) + std::abs(z) + std::abs(hes(n + 1, n + 1))))
                           break;
                   }
   
                   for (size_t i{n + 2}; i <= en; ++i) hes(i, i - 2) = static_cast<T>(0.0);
                   for (size_t i{n + 3}; i <= en; ++i) hes(i, i - 3) = static_cast<T>(0.0);
   
                   for (size_t k{n}; k <= na; ++k)
                   {  // QR step for rows 1 to en and cols m to en
                       if (k != n)
                       {
                           p = hes(k, k - 1);
                           q = hes(k + 1, k - 1);
                           r = (k != na) ? hes(k + 2, k - 1) : static_cast<T>(0.0);
                           x = std::abs(p) + std::abs(q) + std::abs(r);
                           if (x == static_cast<T>(0.0)) continue;
                           p /= x;
                           q /= x;
                           r /= x;
                       }
                       s = LinAlg::norm(Matrix<3, 1, T>{p, q, r});
                       if (p < static_cast<T>(0.0)) s = -s;
   
                       if (k != n) { hes(k, k - 1) = -s * x; }
                       else if (l != n) { hes(k, k - 1) = -hes(k, k - 1); }
                       p += s;
                       x = p / s;
                       y = q / s;
                       z = r / s;
                       q /= p;
                       r /= p;
   
                       for (j = k; j < m; ++j)
                       {  // modify rows
                           p = hes(k, j) + q * hes(k + 1, j);
                           if (k != na)
                           {
                               p += r * hes(k + 2, j);
                               hes(k + 2, j) -= p * z;
                           }
                           hes(k + 1, j) -= p * y;
                           hes(k, j) -= p * x;
                       }
   
                       j = (k + 3 < en) ? k + 3 : en;
                       for (size_t i{0}; i <= j; ++i)
                       {  // modify cols
                           p = x * hes(i, k) + y * hes(i, k + 1);
                           if (k != na)
                           {
                               p += z * hes(i, k + 2);
                               hes(i, k + 2) -= p * r;
                           }
                           hes(i, k + 1) -= p * q;
                           hes(i, k) -= p;
                       }
   
                       // Eigen Vectors
                       for (size_t i{low}; i <= high; ++i)
                       {
                           p = x * eigenVectors(i, k) + y * eigenVectors(i, k + 1);
                           if (k != na)
                           {
                               p += z * eigenVectors(i, k + 2);
                               eigenVectors(i, k + 2) -= p * r;
                           }
                           eigenVectors(i, k + 1) -= p * q;
                           eigenVectors(i, k) -= p;
                       }
                   }
               }
           }
   
           // transform eigen vectors
           if (transformEigenVectors(hes, eigenValuesR, eigenValuesI, eigenVectors, low, high)) return true;
           return false;
       }
   
       template <size_t m, typename T>
       bool transformEigenVectors(Matrix<m, m, T>& hes, Matrix<m, 1, T>& eigenValuesR, Matrix<m, 1, T>& eigenValuesI, Matrix<m, m, T>& eigenVectors, size_t low,
                                  size_t high)
       {
           size_t l, n, en, na;
           T p, q, r{0.0}, s{0.0}, t, w, x, y, z{0.0};
           T ra, sa, vr, vi, norm{0.0};
   
           // Find the norm of hes
           for (size_t i = 0; i < m; ++i)
           {
               for (size_t j = i; j < m; ++j) norm += std::abs(hes(i, j));
           }
   
           if (norm == static_cast<T>(0.0)) return true;
   
           // Transform back
           for (size_t en_{1}; en_ <= m; ++en_)
           {
               en = m - en_;
               p = eigenValuesR(en);
               q = eigenValuesI(en);
               na = en - 1;
               if (q == 0.0)
               {
                   n = en;
                   hes(en, en) = 1.0;
                   size_t i;
                   for (size_t i_{0}; i_ <= na && na < m; ++i_)
                   {  // Check for underflow on na
                       i = na - i_;
                       w = hes(i, i) - p;
                       r = hes(i, en);
                       for (size_t j = n; j <= na; ++j) r += hes(i, j) * hes(j, en);
                       if (eigenValuesI(i) < 0.0)
                       {
                           z = w;
                           s = r;
                       }
                       else
                       {
                           n = i;
                           if (eigenValuesI(i) == 0.0) { hes(i, en) = -r / ((w != 0.0) ? w : _MACH_EPS * norm); }
                           else
                           {
                               x = hes(i, i + 1);
                               y = hes(i + 1, i);
                               q = (eigenValuesR(i) - p) * (eigenValuesR(i) - p) + eigenValuesI(i) * eigenValuesI(i);
                               hes(i, en) = t = (x * s - z * r) / q;
                               hes(i + 1, en) = std::abs(x) > std::abs(z) ? (-r - w * t) / x : (-s - y * t) / z;
                           }
                       }
                   }
               }
               else if (q < 0.0)
               {
                   n = na;
                   if (std::abs(hes(en, na)) > std::abs(hes(na, en)))
                   {
                       hes(na, na) = -(hes(en, en) - p) / hes(en, na);
                       hes(na, en) = -q / hes(en, na);
                   }
                   else
                   {
                       std::complex<T> temp1(-hes(na, en), 0.0);
                       std::complex<T> temp2(hes(na, na) - p, q);
                       std::complex<T> c = temp1 / temp2;
                       hes(na, na) = std::real(c);
                       hes(na, en) = std::imag(c);
                   }
   
                   hes(en, na) = 1.0;
                   hes(en, en) = 0.0;
                   size_t i;
                   for (size_t i_{1}; i_ <= na; ++i_)
                   {
                       i = na - i_;
                       w = hes(i, i) - p;
                       ra = hes(i, en);
                       sa = 0.0;
                       for (size_t j = n; j <= na; ++j)
                       {
                           ra += hes(i, j) * hes(j, na);
                           sa += hes(i, j) * hes(j, en);
                       }
   
                       if (eigenValuesI(i) < 0.0)
                       {
                           z = w;
                           r = ra;
                           s = sa;
                       }
                       else
                       {
                           n = i;
                           if (eigenValuesI(i) == 0.0)
                           {
                               std::complex<T> temp1(-ra, -sa);
                               std::complex<T> temp2(w, q);
                               std::complex<T> c = temp1 / temp2;
                               hes(i, na) = std::real(c);
                               hes(i, en) = std::imag(c);
                           }
                           else
                           {
                               x = hes(i, i + 1);
                               y = hes(i + 1, i);
                               vr = (eigenValuesR(i) - p) * (eigenValuesR(i) - p) + eigenValuesI(i) * eigenValuesI(i) - q * q;
                               vi = 2.0 * q * (eigenValuesI(i) - p);
                               if (vr == 0.0 && vi == 0.0) vr = _MACH_EPS * norm * (std::abs(w) + std::abs(q) + std::abs(x) + std::abs(y) + std::abs(z));
                               {
                                   std::complex<T> temp1(x * r - z * ra + q * sa, x * s - z * sa - q * ra);
                                   std::complex<T> temp2(vr, vi);
                                   std::complex<T> c = temp1 / temp2;
                                   hes(i, na) = std::real(c);
                                   hes(i, en) = std::imag(c);
                               }
   
                               if (std::abs(x) > std::abs(z) + std::abs(q))
                               {
                                   hes(i + 1, na) = (-ra - w * hes(i, na) + q * hes(i, en)) / x;
                                   hes(i + 1, en) = (-sa - w * hes(i, en) - q * hes(i, na)) / x;
                               }
                               else
                               {
                                   std::complex<T> temp1(-r - y * hes(i, na), -s - y * hes(i, en));
                                   std::complex<T> temp2(z, q);
                                   std::complex<T> c = temp1 / temp2;
                                   hes(i + 1, na) = std::real(c);
                                   hes(i + 1, en) = std::imag(c);
                               }
                           }
                       }
                   }
               }
           }
   
           for (size_t i = 0; i < m; ++i)
           {
               if (i < low || i > high)
                   for (size_t k = i + 1; k < m; ++k) eigenVectors(i, k) = hes(i, k);
           }
   
           size_t j;
           for (size_t j_{low}; j_ != m; ++j_)
           {
               j = m - 1 - j_;
               n = j <= high ? j : high;
               if (eigenValuesI(j) < 0.0)
               {
                   l = j - 1;
                   for (size_t i = low; i <= high; ++i)
                   {
                       y = 0.0;
                       z = 0.0;
                       for (size_t k = low; k <= n; ++k)
                       {
                           y += eigenVectors(i, k) * hes(k, l);
                           z += eigenVectors(i, k) * hes(k, j);
                       }
                       eigenVectors(i, l) = y;
                       eigenVectors(i, j) = z;
                   }
               }
               else
               {
                   if (eigenValuesI(j) == 0.0)
                   {
                       for (size_t i = low; i <= high; ++i)
                       {
                           z = 0.0;
                           for (size_t k = low; k <= n; ++k) z += eigenVectors(i, k) * hes(k, j);
                           eigenVectors(i, j) = z;
                       }
                   }
               }
           }
   
           return false;
       }
   
       int computeBasis()
       {
           float x{1.0}, eins{1.0}, b{1.0};
   
           while ((x + eins) - x == eins) x *= 2.0;
           while ((x + b) == x) b *= 2.0;
   
           return static_cast<int>((x + b) - x);
       }
   
       template <size_t m, typename T>
       bool normalizeEigenVectors(Matrix<m, m, T>& eigenVectors, Matrix<m, 1, T>& eigenValuesI)
       {
           if (m < 1) return true;
   
           float maxI, tr, ti;
           for (size_t j{0}; j < m; ++j)
           {
               if (eigenValuesI(j) == 0.0)
               {
                   maxI = eigenVectors(0, j);
                   for (size_t i{1}; i < m; ++i)
                   {
                       if (std::abs(eigenVectors(i, j)) > std::abs(maxI)) maxI = eigenVectors(i, j);
                   }
   
                   if (maxI != 0.0)
                   {
                       maxI = 1.0 / maxI;
                       for (size_t i{0}; i < m; ++i) eigenVectors(i, j) *= maxI;
                   }
               }
               else
               {
                   tr = eigenVectors(0, j);
                   ti = eigenVectors(0, j + 1);
                   for (size_t i{1}; i < m; ++i)
                   {
                       std::complex<T> temp1(eigenVectors(i, j), eigenVectors(i, j + 1));
                       std::complex<T> temp2(tr, ti);
                       if (std::norm(temp1) > std::norm(temp2))
                       {
                           tr = eigenVectors(i, j);
                           ti = eigenVectors(i, j + 1);
                       }
                   }
                   if (tr != 0.0 || ti != 0.0)
                   {
                       for (size_t i{0}; i < m; ++i)
                       {
                           std::complex<T> temp1(eigenVectors(i, j), eigenVectors(i, j + 1));
                           std::complex<T> temp2(tr, ti);
                           std::complex<T> c = temp1 / temp2;
                           eigenVectors(i, j) = std::real(c);
                           eigenVectors(i, j + 1) = std::imag(c);
                       }
                   }
                   ++j;
               }
           }
   
           return false;
       }
   
       int _maxIter;
   };
   
   class LinearLeastSquares
   {
   public:
       enum class LlsError
       {
           None = 0,
           InsufficientData = 9,
           FailedEigenDecomposition = 11,
       };
       template <size_t n, typename T>
       struct LeastSquaresSolution
       {
           Matrix<n, 1, T> solution;
           Matrix<n, n, T> eigenVectors;
           Matrix<n, 1, T> eigenValuesReal;
           Matrix<n, 1, T> eigenValuesImag;
           T FOM;
           LlsError error;  // Replace with error struct
       };
   
       LinearLeastSquares() = default;
   
       template <size_t n, typename T>
       LeastSquaresSolution<n, T> solve(Matrix<n, n, T>& HTH, Matrix<n, 1, T>& HTy, T condition_threshold)
       {
           // Initialize structures
           LeastSquaresSolution<n, T> solution{Matrix<n, 1, T>(0.0), Matrix<n, n, T>(0.0), Matrix<n, 1, T>(0.0), Matrix<n, 1, T>(0.0), 0.0, LlsError::None};
   
           EigenDecomposition eigenDecomp;
           if (eigenDecomp.computeDecomposition(HTH, solution.eigenValuesReal, solution.eigenValuesImag, solution.eigenVectors))
           {
               solution.error = LlsError::FailedEigenDecomposition;
               return solution;
           }
   
           // Check if ill conditioned
           T minEigenValue = findMinimumEigenValue(solution.eigenValuesReal);
           if (minEigenValue < condition_threshold)
           {
               solution.error = LlsError::InsufficientData;
               return solution;
           }
   
           solution.FOM = 1.0 / std::sqrt(minEigenValue);
   
           // Compute LLS solution
           Matrix<n, n, T> tempMat = LinAlg::transpose(solution.eigenVectors);
           Matrix<n, 1, T> tempVec = tempMat * HTy;
           for (size_t i{0}; i < n; ++i)
           {
               for (size_t j{0}; j < n; ++j) { tempMat(i, j) = solution.eigenVectors(i, j) / solution.eigenValuesReal(j); }
           }
   
           solution.solution = tempMat * tempVec;
   
           return solution;
       }
   
   protected:
       template <size_t n, typename T>
       T findMinimumEigenValue(const Matrix<n, 1, T>& vec)
       {
           T minValue = vec(0);
           for (size_t i{1}; i < n; ++i)
           {
               if (minValue > vec(i)) minValue = vec(i);
           }
   
           return minValue;
       }
   };
   
   }  // namespace LinAlg
   }  // namespace VN
   
   #endif  // LINEARALGEBRA_HPP
