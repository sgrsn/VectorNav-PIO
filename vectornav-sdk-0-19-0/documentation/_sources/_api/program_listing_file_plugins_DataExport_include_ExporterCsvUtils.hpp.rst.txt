
.. _program_listing_file_plugins_DataExport_include_ExporterCsvUtils.hpp:

Program Listing for File ExporterCsvUtils.hpp
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_ExporterCsvUtils.hpp>` (``plugins\DataExport\include\ExporterCsvUtils.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef DATAEXPORT_EXPORTERCSVUTILS_HPP
   #define DATAEXPORT_EXPORTERCSVUTILS_HPP
   
   #include <string>
   #include <stdint.h>
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Implementation/AsciiPacketProtocol.hpp"
   
   namespace VN
   {
   
   enum CsvType : uint8_t
   {
       U8,
       U16,
       U32,
       U64,
       UTC,
       FLO,
       DUB,
       SAT,
       RAW,
       UNK,
       NON,
   };
   
   using VN::CsvType;
   
   struct CsvTypeInfo
   {
       CsvType type;
       uint8_t len;
   };
   
   CsvTypeInfo csvTypeLookup(size_t i, size_t j);
   
   template <class T>
   int extractToString(FaPacketExtractor& extractor, const size_t numToExtract, char* ptr, const uint16_t remaining) noexcept
   {
       int offset = 0;
       uint8_t first_comma_skip = 1;  // Skip first comma of sentense
       for (uint8_t i = 0; i < numToExtract; i++)
       {
           constexpr const char* format = []() constexpr
           {
               if constexpr (std::is_same_v<T, float>) { return ",%f"; }
               else if constexpr (std::is_same_v<T, double>) { return ",%12.8f"; }
               else if constexpr (std::is_same_v<T, uint64_t>) { return ",%llu"; }
               else { return ",%d"; }
           }();
           offset += std::snprintf(ptr + offset, remaining - offset - first_comma_skip, format + first_comma_skip, extractor.extract_unchecked<T>());
           first_comma_skip = 0;
       }
       return offset;
   }
   
   int getMeasurementString(FaPacketExtractor& extractor, const CsvTypeInfo& typeInfo, char* ptr, const uint16_t remaining);
   
   const char* getMeasurementString(const AsciiPacketProtocol::AsciiMeasurementHeader& msg);
   
   const char* getMeasurementName(const size_t binaryGroup, const size_t binaryField);
   
   }  // namespace VN
   
   #endif  // DATAEXPORT_EXPORTERCSVUTILS_HPP
