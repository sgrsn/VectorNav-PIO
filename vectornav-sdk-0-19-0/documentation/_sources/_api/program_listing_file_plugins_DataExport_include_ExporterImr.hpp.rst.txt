
.. _program_listing_file_plugins_DataExport_include_ExporterImr.hpp:

Program Listing for File ExporterImr.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_ExporterImr.hpp>` (``plugins\DataExport\include\ExporterImr.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef FILE_EXPORTER_IMR_H
   #define FILE_EXPORTER_IMR_H
   
   #include <cmath>
   #include <cstddef>
   #include <cstdint>
   #include <cstdio>
   #include "Config.hpp"
   #include "Exporter.hpp"
   
   #include "HAL/File.hpp"
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Interface/CompositeData.hpp"
   #include "TemplateLibrary/ByteBuffer.hpp"
   
   namespace VN
   {
   
   class ExporterImr : public Exporter
   {
   private:
       static constexpr uint16_t EXPORTER_PACKET_CAPACITY = 2048;
   
   public:
       ExporterImr(const Filesystem::FilePath& fileName) : Exporter(EXPORTER_PACKET_CAPACITY), _fileName(fileName), _file(fileName + ".imr")
       {
           _file.write(reinterpret_cast<char*>(&_header), sizeof(_header));
       }
   
       ~ExporterImr() { finalize(); }
   
       void addPacketToProcess(const std::shared_ptr<Packet> ptr) override
       {
           // _queue.push_back(ptr);
       }
   
       void exportToFile() override
       {
           static constexpr uint64_t nsInWeek = static_cast<uint64_t>(7 * 24 * 3600) * 1000000000;
   
           while (_queue.size() > 0)
           {
               // const auto p = _queue.back();
               // _queue.pop_back();
   
               const auto p = _queue.get();
               if (!p) { return; }
               ByteBuffer byteBuffer(p->buffer, p->size, p->size);
   
               const auto cd = FaPacketProtocol::parsePacket(byteBuffer, 0, p->details.faMetadata, Config::PacketDispatchers::cdEnabledMeasTypes);
   
               if (!cd) return;
   
               if (cd->time.timeGps.has_value()) { _data.gpsTow = static_cast<double>(cd->time.timeGps.value().nanoseconds() % nsInWeek) / 1000000000; }
               else if (cd->time.timeGpsTow.has_value()) { _data.gpsTow = static_cast<double>(cd->time.timeGpsTow.value().nanoseconds()) / 1000000000; }
               else
               {
                   // no timestamps available
                   return;
               }
   
               if (prevTime != 0) { _avgDt += ((_data.gpsTow - prevTime) - _avgDt) / (_numSamples++); }
               prevTime = _data.gpsTow;
   
               // find imu data
               if (cd->imu.uncompGyro.has_value() && cd->imu.uncompAccel.has_value())
               {
                   _data.uncompGyroX = (cd->imu.uncompGyro.value()[0] * RAD2DEG) * scaleFactor;
                   _data.uncompGyroY = (cd->imu.uncompGyro.value()[1] * RAD2DEG) * scaleFactor;
                   _data.uncompGyroZ = (cd->imu.uncompGyro.value()[2] * RAD2DEG) * scaleFactor;
                   _data.uncompAccelX = cd->imu.uncompAccel.value()[0] * scaleFactor;
                   _data.uncompAccelY = cd->imu.uncompAccel.value()[1] * scaleFactor;
                   _data.uncompAccelZ = cd->imu.uncompAccel.value()[2] * scaleFactor;
               }
               else
               {
                   // no inertial data available
                   return;
               }
   
               _file.write(reinterpret_cast<char*>(&_data), sizeof(_data));
           }
       }
   
       void finalize()
       {
           // _file.seekp(0, std::ios::beg);
           _file.reset();
   
           _header.dataRateHz = std::round(1.0 / _avgDt);
           _header.gyroScaleFactor = 1.0 / static_cast<double>(scaleFactor);
           _header.accelScaleFactor = 1.0 / static_cast<double>(scaleFactor);
           _header.levelArmValid = 0;
           _header.IYoffset = 0;
           _header.IXoffset = 0;
           _header.IZoffset = 0;
   
           // std::snprintf(_header.imuName, sizof(_header.imuName), "%32s", serialNumber);
   
           std::cout << "Rate: " + std::to_string(_header.dataRateHz) + " Hz" << std::endl;
           std::cout << "Samples: " + std::to_string(_numSamples) << std::endl;
   
           _file.write(reinterpret_cast<char*>(&_header), sizeof(_header));
       }
   
   private:
       double prevTime = 0;
       float _avgDt = 0;
       size_t _numSamples = 1;
       static constexpr int scaleFactor = 1000000;
       static constexpr float RAD2DEG = 180 / 3.1415926535897931;
       Filesystem::FilePath _fileName;
       OutputFile _file;
   
   // exact fit - no padding
   #pragma pack(push, 1)
       struct ImrFileHeader
       {
           uint8_t header[8] = "$IMURAW";
           uint8_t isIntelOrMotorola = 0;
           double versionNumber = 8.9;
           int32_t deltaTheta = 0;
           int32_t deltaVelocity = 0;
           double dataRateHz = 0;
           double gyroScaleFactor = 0;
           double accelScaleFactor = 0;
           int32_t utcOrGpsTime = 2;
           int32_t rcvTimeOrCorrTime = 0;
           double timeTagBias = 0;
           uint8_t imuName[32] = "                               ";
           uint8_t reserved1[4] = {0};
           uint8_t programName[32] = "VectorNav File Export          ";
           uint8_t create[12] = {0};
           uint8_t levelArmValid = 0;
           int32_t IYoffset = 0;
           int32_t IXoffset = 0;
           int32_t IZoffset = 0;
           uint8_t reserved[354] = {0};
   
       } _header;
   #pragma pack(pop)
   
   #pragma pack(push, 1)  // exact fit - no padding
       struct ImrData
       {
           double gpsTow;
           int32_t uncompGyroY;
           int32_t uncompGyroX;
           int32_t uncompGyroZ;
           int32_t uncompAccelY;
           int32_t uncompAccelX;
           int32_t uncompAccelZ;
       } _data;
   #pragma pack(pop)
   };
   
   }  // namespace VN
   
   #endif  // FILE_EXPORTER_IMR_H
