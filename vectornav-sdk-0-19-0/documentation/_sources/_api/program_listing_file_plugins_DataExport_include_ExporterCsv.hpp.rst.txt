
.. _program_listing_file_plugins_DataExport_include_ExporterCsv.hpp:

Program Listing for File ExporterCsv.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_ExporterCsv.hpp>` (``plugins\DataExport\include\ExporterCsv.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef DATAEXPORT_EXPORTERCSV_HPP
   #define DATAEXPORT_EXPORTERCSV_HPP
   
   #include <chrono>
   #include <algorithm>
   
   #include "Exporter.hpp"
   #include "HAL/File.hpp"
   #include "HAL/Duration.hpp"
   #include "Implementation/Packet.hpp"
   #include "Implementation/BinaryHeader.hpp"
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Implementation/QueueDefinitions.hpp"
   #include "ExporterCsvUtils.hpp"
   
   namespace VN
   {
   
   class ExporterCsv : public Exporter
   {
   private:
       static constexpr uint8_t MAX_NUM_FILES = 4;
       static constexpr uint16_t EXPORTER_PACKET_CAPACITY = 2048;
       static constexpr uint16_t STRING_BUFFER_CAPACITY = 256;
   
   public:
       ExporterCsv(const Filesystem::FilePath& outputDir, bool enableSystemTimeStamps = false)
           : Exporter(EXPORTER_PACKET_CAPACITY), _filePath(outputDir), _enableSystemTimeStamps(enableSystemTimeStamps)
       {
           if (!_filePath.empty() && _filePath.back() != std::filesystem::path::preferred_separator)
           {
               _filePath = _filePath + std::filesystem::path::preferred_separator;
           }
       }
   
       ~ExporterCsv() = default;
   
       struct CsvInfo
       {
           PacketDetails details;
           OutputFile file;
       };
   
       struct DynamicCsvInfo
       {
           uint8_t measGroupNum;
           uint8_t measTypeNum;
           OutputFile file;
       };
   
       void exportToFile() override
       {
           while (!_queue.isEmpty())
           {
               const auto p = _queue.get();
               if (!p) { return; }
   
               if (_csvInfo.size() == _csvInfo.capacity())
               {
                   VN_DEBUG_1("Packet dropped.");
                   continue;
               }
   
               OutputFile& csv = getFileHandle(p.get());
               if (_enableSystemTimeStamps)
               {
                   const auto timestamp =
                       (p->details.syncByte == PacketDetails::SyncByte::Ascii) ? p->details.asciiMetadata.timestamp : p->details.faMetadata.timestamp;
                   const uint16_t num_bytes =
                       std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%lld,",
                                     static_cast<long long int>(std::chrono::duration_cast<Nanoseconds>(timestamp.time_since_epoch()).count()));
                   csv.write(_tmpBuffer.data(), num_bytes);
               }
   
               if (p->details.syncByte == PacketDetails::SyncByte::Ascii)
               {
                   const size_t begin = p->details.asciiMetadata.delimiterIndices.front() + 1;
                   const size_t end = p->details.asciiMetadata.delimiterIndices.back();
                   csv.write(reinterpret_cast<const char*>(&p->buffer[begin]), end - begin);
               }
               else
               {
                   OutputFile& csv = getFileHandle(p.get());
                   bool first_meas_of_line = true;
                   FaPacketExtractor extractor(p->buffer, p->details.faMetadata);
                   extractor.discard(p->details.faMetadata.header.size() + 1);
   
                   BinaryHeaderIterator iter(p->details.faMetadata.header);
                   while (iter.next())
                   {
                       const auto typeInfo = csvTypeLookup(iter.group(), iter.field());
                       if (!(typeInfo.type == CsvType::SAT || typeInfo.type == CsvType::RAW))
                       {
                           if (!first_meas_of_line) { csv.write(","); }
                           first_meas_of_line = false;
                           const uint16_t num_bytes = getMeasurementString(extractor, typeInfo, _tmpBuffer.data(), _tmpBuffer.size());
                           csv.write(_tmpBuffer.data(), num_bytes);
                       }
                       else
                       {
                           OutputFile& dynamicCsv = getDynamicFileHandle(iter.group(), iter.field(), p->details.faMetadata.header);
                           if (typeInfo.type == CsvType::SAT)
                           {
                               if (_enableSystemTimeStamps) { _writeTimestamp(dynamicCsv, p->details.faMetadata.timestamp); }
   
                               const auto numSats = extractor.extract_unchecked<uint8_t>();
                               int num_bytes = std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%u%s", numSats, (numSats == 0) ? "" : ",");
                               dynamicCsv.write(_tmpBuffer.data(), num_bytes);
   
                               extractor.discard(1);
                               for (auto i = 0; i < GNSS_SAT_INFO_MAX_COUNT; i++)
                               {
                                   if (i < numSats)
                                   {
                                       num_bytes = getMeasurementString(extractor, typeInfo, _tmpBuffer.data(), _tmpBuffer.size());
                                       dynamicCsv.write(_tmpBuffer.data(), num_bytes);
                                       if (i < numSats - 1) { dynamicCsv.write(","); }
                                   }
                                   else { dynamicCsv.write(",0,0,0,0,0,0,0"); }
                               }
                               dynamicCsv.write("\n");
                           }
                           else
                           {
                               int offset = 0;
                               if (_enableSystemTimeStamps)
                               {
                                   offset +=
                                       std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%lld,",
                                                     static_cast<long long int>(
                                                         std::chrono::duration_cast<Nanoseconds>(p->details.faMetadata.timestamp.time_since_epoch()).count()));
                               }
                               offset += extractToString<double>(extractor, 1, _tmpBuffer.data() + offset, _tmpBuffer.size());
                               offset += std::snprintf(_tmpBuffer.data() + offset, _tmpBuffer.size() - offset, ",");
   
                               offset += extractToString<uint16_t>(extractor, 1, _tmpBuffer.data() + offset, _tmpBuffer.size() - offset);
                               offset += std::snprintf(_tmpBuffer.data() + offset, _tmpBuffer.size() - offset, ",");
   
                               const auto numSats = extractor.extract_unchecked<uint8_t>();
                               offset += std::snprintf(_tmpBuffer.data() + offset, _tmpBuffer.size() - offset, "%u,", numSats);
   
                               extractor.discard(1);
   
                               for (auto i = 0; i < numSats; i++)
                               {
                                   const uint16_t num_bytes = getMeasurementString(extractor, typeInfo, _tmpBuffer.data() + offset, _tmpBuffer.size());
                                   dynamicCsv.write(_tmpBuffer.data(), offset + num_bytes);
                                   dynamicCsv.write("\n");
                               }
                           }
                       }
                   }
               }
               csv.write("\n");
           }
       }
   
   private:
       void init_csv(CsvInfo& csvInfo, const Packet* p)
       {
           if (_enableSystemTimeStamps) { csvInfo.file.write("systemTimeStamp,"); }
   
           if (csvInfo.details.syncByte == PacketDetails::SyncByte::Ascii)
           {
               const AsciiPacketProtocol::AsciiMeasurementHeader asciiHeader = AsciiPacketProtocol::getMeasHeader(csvInfo.details.asciiMetadata.header);
               csvInfo.file.write(getMeasurementString(asciiHeader));
   
               if (std::find(&p->buffer[7], &p->buffer[p->details.asciiMetadata.length], 'S') != &p->buffer[p->details.asciiMetadata.length])
               {
                   csvInfo.file.write(",appendStatus");
               }
   
               if (std::find(&p->buffer[7], &p->buffer[p->details.asciiMetadata.length], 'T') != &p->buffer[p->details.asciiMetadata.length])
               {
                   csvInfo.file.write(",appendCount");
               }
   
               csvInfo.file.write("\n");
           }
           else
           {
               bool firstMeas = true;
               BinaryHeaderIterator iter(p->details.faMetadata.header);
               while (iter.next())
               {
                   // Let dynamic be inited themselves with their own explicit call
                   const auto typeInfo = csvTypeLookup(iter.group(), iter.field());
                   if ((typeInfo.type == CsvType::SAT || typeInfo.type == CsvType::RAW)) { continue; }
   
                   if (!firstMeas) { csvInfo.file.write(","); }
                   firstMeas = false;
                   csvInfo.file.write(getMeasurementName(iter.group(), iter.field()));
               }
               csvInfo.file.write("\n");
           }
       }
   
       void init_dynamic_csv(DynamicCsvInfo& dynamicCsvInfo, const uint8_t measGroupNum, const uint8_t measTypeNum)
       {
           if (_enableSystemTimeStamps) { dynamicCsvInfo.file.write("systemTimeStamp,"); }
   
           if (measTypeNum == 14) { _init_sat_info(dynamicCsvInfo, measGroupNum, measTypeNum); }
           else { _init_raw_meas(dynamicCsvInfo, measGroupNum, measTypeNum); }
       }
   
       void _init_sat_info(DynamicCsvInfo& dynamicCsvInfo, const uint8_t measGroupNum, const uint8_t measTypeNum)
       {
           const uint8_t skipLength = sizeof("NumSats,") - 1;
           uint8_t skip = 0;
           for (uint8_t i = 0; i < GNSS_SAT_INFO_MAX_COUNT; i++)
           {
               if (i == 1) { skip = skipLength; }
               const uint16_t num_chars = std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%s", getMeasurementName(measGroupNum, measTypeNum));
   
               char satNum[] = "00";
               std::snprintf(satNum, sizeof(satNum), "%02d", i);
   
               for (uint16_t j = 0; j < num_chars; j++)
               {
                   if (_tmpBuffer[j] == '?')
                   {
                       _tmpBuffer[j++] = satNum[0];
                       _tmpBuffer[j++] = satNum[1];
                   }
               }
               dynamicCsvInfo.file.write(_tmpBuffer.data() + skip, num_chars - skip);
               if (i < GNSS_SAT_INFO_MAX_COUNT - 1) { dynamicCsvInfo.file.write(","); }
           }
           dynamicCsvInfo.file.write("\n");
       }
   
       void _init_raw_meas(DynamicCsvInfo& dynamicCsvInfo, const uint8_t measGroupNum, const uint8_t measTypeNum)
       {
           const uint16_t num_chars = std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%s\n", getMeasurementName(measGroupNum, measTypeNum));
           dynamicCsvInfo.file.write(_tmpBuffer.data(), num_chars);
       }
   
       void _writeTimestamp(OutputFile& file, time_point timestamp)
       {
           const uint16_t num_bytes = std::snprintf(_tmpBuffer.data(), _tmpBuffer.size(), "%lld,",
                                                    static_cast<long long int>(std::chrono::duration_cast<Nanoseconds>(timestamp.time_since_epoch()).count()));
           file.write(_tmpBuffer.data(), num_bytes);
       }
   
       OutputFile& getFileHandle(const Packet* p)
       {
           Filesystem::FilePath fileName;
           if (p->details.syncByte == PacketDetails::SyncByte::Ascii)
           {
               for (auto& tmp : _csvInfo)
               {
                   if (tmp.details.syncByte == PacketDetails::SyncByte::Ascii && p->details.asciiMetadata.header == tmp.details.asciiMetadata.header)
                   {
                       return tmp.file;
                   }
               }
               std::snprintf(fileName.begin(), fileName.capacity(), "%s%s.csv", _filePath.c_str(), p->details.asciiMetadata.header.c_str());
           }
           else
           {
               for (auto& tmp : _csvInfo)
               {
                   if (tmp.details.syncByte == PacketDetails::SyncByte::FA && p->details.faMetadata.header == tmp.details.faMetadata.header) { return tmp.file; }
               }
               std::snprintf(fileName.begin(), fileName.capacity(), "%sFA%s.csv", _filePath.c_str(),
                             binaryHeaderToString<64>(p->details.faMetadata.header).c_str());
               std::replace(fileName.begin(), fileName.end(), ',', '_');
           }
   
           if (_csvInfo.push_back(CsvInfo{p->details, OutputFile(fileName)})) { VN_ABORT(); }
           // if we don't find the header we need to init a new csv
   
           init_csv(_csvInfo.back(), p);
   
           return _csvInfo.back().file;
       }
   
       OutputFile& getDynamicFileHandle(const uint8_t measGroupNum, const uint8_t measTypeNum, const BinaryHeader& header)
       {
           for (auto& tmp : _dynamicCsvInfo)
           {
               if (tmp.measGroupNum == measGroupNum && tmp.measTypeNum == measTypeNum) { return tmp.file; }
           }
   
           const auto typeInfo = csvTypeLookup(measGroupNum, measTypeNum);
   
           Filesystem::FilePath fileName;
           const char gnss_num = measGroupNum == 3 ? '1' : '2';
   
           if (typeInfo.type == CsvType::SAT)
           {
               std::snprintf(fileName.begin(), fileName.capacity(), "%sFA%s_SatInfo%c.csv", _filePath.c_str(), binaryHeaderToString<64>(header).c_str(), gnss_num);
           }
           else if (typeInfo.type == CsvType::RAW)
           {
               std::snprintf(fileName.begin(), fileName.capacity(), "%sFA%s_RawMeas%c.csv", _filePath.c_str(), binaryHeaderToString<64>(header).c_str(), gnss_num);
           }
           else { VN_ABORT(); }
           std::replace(fileName.begin(), fileName.end(), ',', '_');
   
           if (_dynamicCsvInfo.push_back(DynamicCsvInfo{measGroupNum, measTypeNum, OutputFile(fileName)})) { VN_ABORT(); }
   
           init_dynamic_csv(_dynamicCsvInfo.back(), measGroupNum, measTypeNum);
           return _dynamicCsvInfo.back().file;
       }
   
   private:
       Filesystem::FilePath _filePath;
       const bool _enableSystemTimeStamps = false;
       std::array<char, STRING_BUFFER_CAPACITY> _tmpBuffer;
   
       Vector<CsvInfo, MAX_NUM_FILES> _csvInfo;                // One entry per file created, which is per unique message type
       Vector<DynamicCsvInfo, MAX_NUM_FILES> _dynamicCsvInfo;  // One entry per file created, which is per unique message type
   };
   
   }  // namespace VN
   
   #endif  // DATAEXPORT_EXPORTERCSV_HPP
