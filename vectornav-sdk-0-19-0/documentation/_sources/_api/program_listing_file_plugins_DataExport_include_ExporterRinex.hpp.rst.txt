
.. _program_listing_file_plugins_DataExport_include_ExporterRinex.hpp:

Program Listing for File ExporterRinex.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_plugins_DataExport_include_ExporterRinex.hpp>` (``plugins\DataExport\include\ExporterRinex.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef DATAEXPORT_EXPORTERRINEX_HPP
   #define DATAEXPORT_EXPORTERRINEX_HPP
   
   #include <ctime>
   #include <cmath>
   #include <limits>
   
   #include "Config.hpp"
   #include "Exporter.hpp"
   #include "HAL/File.hpp"
   #include "Interface/CompositeData.hpp"
   #include "TemplateLibrary/ByteBuffer.hpp"
   #include "Implementation/BinaryHeader.hpp"
   #include "Implementation/FaPacketProtocol.hpp"
   #include "Implementation/QueueDefinitions.hpp"
   #include "Implementation/MeasurementDatatypes.hpp"
   #include "Implementation/BinaryMeasurementDefinitions.hpp"
   
   namespace VN
   {
   
   static_assert((GNSS_GROUP_ENABLE & GNSS_GNSS1RAWMEAS_BIT) | (GNSS2_GROUP_ENABLE & GNSS2_GNSS2RAWMEAS_BIT), "GNSS raw meas is not enabled");
   
   class ExporterRinex : public Exporter
   {
   private:
       static constexpr uint16_t EXPORTER_PACKET_CAPACITY = 2048;
       static constexpr uint16_t STRING_BUFFER_CAPACITY = 1024;
   
   public:
       ExporterRinex(const Filesystem::FilePath& fileName, const uint32_t gnssGroup)
           : Exporter(EXPORTER_PACKET_CAPACITY), _fileName(fileName), _gnssGroup(gnssGroup)
       {
           switch (gnssGroup)
           {
               case 1:
               {
                   _fileName = _fileName + "-1";
                   _gnssGroup = GNSS_BIT;
                   break;
               }
               case 2:
               {
                   _fileName = _fileName + "-2";
                   _gnssGroup = GNSS2_BIT;
                   break;
               }
               default:
                   VN_ABORT();
           }
           _file.open(_fileName + ".obs");
           for (int i = 0; i < 16; i++) { _file.write("                                                                                \n"); }
       }
   
       ~ExporterRinex() { finalize(); }
   
       void finalize()
       {
           _file.reset();
   
           size_t bytesWritten = 0;
   
           time_t now = time(0);
           std::tm tm{};
           tm = *gmtime(&now);
   
           bytesWritten += std::sprintf(buffer + bytesWritten, "     3.03           OBSERVATION DATA    M: Mixed            RINEX VERSION / TYPE\n");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%-40s%04d%02d%02d %02d%02d%02d UTC %-20s\n", "VNSDK File Export", tm.tm_year + 1900, tm.tm_mon + 1,
                                        tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec, "GM / RUN BY / DATE");
   
           bytesWritten += std::sprintf(buffer + bytesWritten, "%60c%-20s\n", ' ', "MARKER NAME");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%60c%-20s\n", ' ', "MARKER NUMBER");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%60c%-20s\n", ' ', "OBSERVER / AGENCY");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%60c%-20s\n", ' ', "REC # / TYPE / VERS");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%60c%-20s\n", ' ', "ANT # / TYPE");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%14.4f%14.4f%14.4f                  %-20s\n", 0.0, 0.0, 0.0, "APPROX POSITION XYZ");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%14.4f%14.4f%14.4f                  %-20s\n", 0.0, 0.0, 0.0, "ANTENNA: DELTA H/E/N");
   
           uint8_t idx = 0;
           for (const auto& signals : _trackedSatelliteInfo)
           {
               size_t offset = bytesWritten;
   
               const uint8_t num_signals = signals.size() - std::count(signals.begin(), signals.end(), 0);
   
               if (num_signals == 0) continue;
   
               bytesWritten += std::sprintf(buffer + bytesWritten, "%c  %3d", sysId[idx++], num_signals * 4);
   
               for (uint8_t i = 0; i < signals.size(); i++)
               {
                   if (signals[i] == 0) continue;
                   const uint8_t chan = chanCode[i];
                   const uint8_t freq = signals[i];
                   bytesWritten += std::sprintf(buffer + bytesWritten, " C%u%c L%u%c D%u%c S%u%c", freq, chan, freq, chan, freq, chan, freq, chan);
               }
   
               bytesWritten += std::sprintf(buffer + bytesWritten, "%*c%-20s\n", static_cast<int>(60 - (bytesWritten - offset)), ' ', "SYS / # / OBS TYPES");
           }
   
           tm = *gmtime(&firstTimeGps);
           bytesWritten += std::sprintf(buffer + bytesWritten, "%6d%6d%6d%6d%6d%5d.0000000%8s         %-20s\n", tm.tm_year + 1900, tm.tm_mon, tm.tm_mday,
                                        tm.tm_hour, tm.tm_min, tm.tm_sec, "GPS", "TIME OF FIRST OBS");
           tm = *gmtime(&lastTimeGps);
           bytesWritten += std::sprintf(buffer + bytesWritten, "%6d%6d%6d%6d%6d%5d.0000000%8s         %-20s\n", tm.tm_year + 1900, tm.tm_mon, tm.tm_mday,
                                        tm.tm_hour, tm.tm_min, tm.tm_sec, "GPS", "TIME OF LAST OBS");
   
           bytesWritten += std::sprintf(buffer + bytesWritten, "%-60c%-20s\n", 'G', "SYS / PHASE SHIFT");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%-60c%-20s\n", 'E', "SYS / PHASE SHIFT");
           bytesWritten += std::sprintf(buffer + bytesWritten, "%-60c%-20s\n", ' ', "END OF HEADER");
   
           _file.write(buffer, bytesWritten);
   
           _file.close();
       }
   
       void exportToFile() override
       {
           while (!_queue.isEmpty())
   
           {
               // VN_PROFILER_TIME_CURRENT_SCOPE();
               const auto p = _queue.get();
               if (!p) { continue; }
   
               if (!p->details.faMetadata.header.contains(_gnssGroup, static_cast<uint32_t>(GNSS_GNSS1RAWMEAS_BIT))) { continue; }
   
               ByteBuffer byteBuffer(p->buffer, p->size, p->size);
   
               const auto cdOpt = FaPacketProtocol::parsePacket(byteBuffer, 0, p->details.faMetadata, Config::PacketDispatchers::cdEnabledMeasTypes);
               if (!cdOpt) continue;
               const auto cd = cdOpt.value();
   
               const GnssRawMeas& gnssRawMeas = [](const CompositeData& cd, const uint8_t _gnssGroup) -> const GnssRawMeas&
               {
                   switch (_gnssGroup)
                   {
   #if (GNSS_GROUP_ENABLE & GNSS_GNSS1RAWMEAS_BIT)
                       case GNSS_BIT:
                           return cd.gnss.gnss1RawMeas.value();
   #endif
   #if (GNSS2_GROUP_ENABLE & GNSS2_GNSS2RAWMEAS_BIT)
                       case GNSS2_BIT:
                           return cd.gnss2.gnss2RawMeas.value();
   #endif
                       default:
                           VN_ABORT();
                   }
               }(cd, _gnssGroup);
   
               const auto num_meas = gnssRawMeas.numMeas;
               if (num_meas == 0) continue;
   
               std::array<int, GNSS_RAW_MEAS_MAX_COUNT> index;
               for (int i = 0; i < num_meas; i++) { index[i] = i; }
   
               // sort based on sys -> svId -> freq
               std::sort(index.begin(), index.begin() + num_meas,
                         [&](int i, int j)
                         {
                             return static_cast<uint64_t>((gnssRawMeas.sys[i] << 24) | (gnssRawMeas.svId[i] << 16) | (gnssRawMeas.band[i] << 8)) <
                                    static_cast<uint64_t>((gnssRawMeas.sys[j] << 24) | (gnssRawMeas.svId[j] << 16) | (gnssRawMeas.band[j] << 8));
                         });
   
               uint8_t num_sats = 0;
               for (size_t i = 0; i < num_meas; i++)
               {
                   _trackedSatelliteInfo[gnssRawMeas.sys[i]][gnssRawMeas.chan[i]] = gnssRawMeas.band[i];
                   if (i == 0 ||
                       ((gnssRawMeas.svId[index[i]] << 8) | gnssRawMeas.sys[index[i]]) != ((gnssRawMeas.svId[index[i - 1]] << 8) | gnssRawMeas.sys[index[i - 1]]))
                   {
                       num_sats++;
                   }
               }
   
               size_t bytesToWrite = 0;
   
               constexpr uint64_t gpsWeekToSeconds = 7 * 24 * 3600;
   
               double seconds = 0;
               double timeleft = std::modf(gnssRawMeas.tow, &seconds);
               double timeTarget = static_cast<uint64_t>((timeleft * 10) + 0.5) / 10.0;
               if (timeTarget >= 1.0)
               {
                   timeTarget -= 1.0;
                   seconds += 1;
                   timeleft = gnssRawMeas.tow - seconds;
               }
               uint64_t subseconds = static_cast<uint64_t>(timeTarget * 10000000);
   
               double compMeters = (timeleft - timeTarget) * GPS_C;
   
               // First GPS Epoch: January 6 1980 00:00:00
               // FIrst UTC Epoch: January 1 1970 00:00:00
               // gmtime uses UTC time, so we must add an offset to get the equivalent GPS Time
               // 315964800 = (10 * 365 + 7)*24*3600
               time_t timeGps = static_cast<uint64_t>(seconds) + gnssRawMeas.week * gpsWeekToSeconds + 315964800;
   
               firstTimeGps = std::min(firstTimeGps, timeGps);
               lastTimeGps = timeGps;
   
               std::tm tm{};
               tm = *gmtime(&timeGps);
   
               bytesToWrite += std::sprintf(buffer, "> %4d %2d %2d %2d %2d %2d.%07d  0 %2d\n", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min,
                                            tm.tm_sec, static_cast<int>(subseconds), num_sats);
   
               uint8_t i = 0;
               while (i < num_meas)
               {
                   // we are either at the first frquency or we are at the second
                   const auto currSatIndex = index[i];
                   bytesToWrite += std::sprintf(buffer + bytesToWrite, "%c%02d", sysId[gnssRawMeas.sys[currSatIndex]], gnssRawMeas.svId[currSatIndex] % 100);
   
                   Vector<uint8_t, 3> trackedBands;
                   const uint16_t currId = (gnssRawMeas.svId[currSatIndex] << 8) | gnssRawMeas.sys[currSatIndex];
                   for (uint8_t j = i; j < num_meas; j++)
                   {
                       const auto nextSatIndex = index[j];
                       const uint16_t nextId = (gnssRawMeas.svId[nextSatIndex] << 8) | gnssRawMeas.sys[nextSatIndex];
   
                       if (currId != nextId || gnssRawMeas.band[nextSatIndex] == 255) break;
   
                       if (gnssRawMeas.band[nextSatIndex] == 7) { trackedBands.push_back(1); }
                       else { trackedBands.push_back(gnssRawMeas.band[nextSatIndex] - 1); }
                   }
   
                   const auto num_pad = trackedBands[0];
                   for (uint8_t j = 0; j < num_pad; j++) { bytesToWrite += std::sprintf(buffer + bytesToWrite, "%*c", 56, ' '); }
   
                   for (uint8_t j = 0; j < trackedBands.size(); j++)
                   {
                       const auto idx = index[i++];
                       bytesToWrite += std::sprintf(buffer + bytesToWrite, "%14.3f%14.3f%14.3f%14.3f", gnssRawMeas.pr[idx] - compMeters, gnssRawMeas.cp[idx],
                                                    gnssRawMeas.dp[idx], static_cast<float>(gnssRawMeas.cno[idx]));
                   }
   
                   buffer[bytesToWrite++] = '\n';
                   _file.write(buffer, bytesToWrite);
                   bytesToWrite = 0;
               }
           }
       }
   
   private:
       char buffer[STRING_BUFFER_CAPACITY];
       static constexpr const char* observablesFormat = "%14.3f%14.3f%14.3f%14.3f";
       static constexpr double GPS_C = 299792458.0;
       static constexpr std::array<char, 9> sysId = {'G', 'S', 'E', 'C', 'X', 'J', 'R', 'I', 'L'};
       static constexpr std::array<char, 15> chanCode = {'P', 'C', 'D', 'Y', 'M', 'N', 'A', 'B', 'I', 'Q', 'S', 'L', 'X', 'W', 'Z'};
   
       time_t firstTimeGps = std::numeric_limits<time_t>::max();
       time_t lastTimeGps = 0;
   
       Filesystem::FilePath _fileName;
       OutputFile _file;
       uint32_t _gnssGroup;
   
       std::array<std::array<uint8_t, chanCode.size()>, sysId.size()> _trackedSatelliteInfo{};
   };
   
   }  // namespace VN
   
   #endif  // DATAEXPORT_EXPORTERRINEX_HPP
