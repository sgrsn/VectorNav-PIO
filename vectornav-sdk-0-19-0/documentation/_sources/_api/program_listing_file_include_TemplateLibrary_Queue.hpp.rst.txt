
.. _program_listing_file_include_TemplateLibrary_Queue.hpp:

Program Listing for File Queue.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_TemplateLibrary_Queue.hpp>` (``include\TemplateLibrary\Queue.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef TEMPLATELIBRARY_QUEUE_HPP
   #define TEMPLATELIBRARY_QUEUE_HPP
   
   #include <array>
   #include "Config.hpp"
   #include "HAL/Mutex.hpp"
   #include <optional>
   
   namespace VN
   {
   
   template <class ItemType, uint16_t Capacity>
   class Queue
   {
   public:
       Queue() = default;
   
       Queue(const Queue& other) = delete;
       Queue& operator=(const Queue& other) = delete;
       Queue(Queue&& other) noexcept = default;
       Queue& operator=(Queue&& other) noexcept = delete;
   
       void put(const ItemType& item) noexcept
       {  // This will fail to put() if the buffer is full
           if (!_full)
           {
               _buffer[_tail] = item;
               _tail = (_tail + 1) % Capacity;
               _full = _tail == _head;
           }
       }
   
       void put(ItemType&& item) noexcept
       {  // This will fail to put() if the buffer is full
           if (!_full)
           {
               _buffer[_tail] = std::move(item);
               _tail = (_tail + 1) % Capacity;
               _full = _tail == _head;
           }
       }
   
       std::optional<ItemType> get() noexcept
       {
           if (_isEmpty()) { return std::nullopt; }
           // Read data and advance the head (we now have a free space)
           auto item = std::move(_buffer[_head]);
           _full = false;
           _head = (_head + 1) % Capacity;
           return item;
       }
   
       std::optional<ItemType> peek() const noexcept
       {
           if (_isEmpty()) { return std::nullopt; }
           // Read data
           auto item = _buffer[_head];
           return item;
       }
   
       void reset() noexcept
       {
           _tail = _head;
           _full = false;
       }
   
       bool isEmpty() const noexcept { return _isEmpty(); }
   
       bool isFull() const noexcept { return _full; }
   
       constexpr uint16_t capacity() const noexcept { return Capacity; }
   
       uint16_t size() const noexcept { return _full ? Capacity : (_tail + Capacity - _head) % Capacity; }
   
       void popBack() noexcept
       {
           if (!_isEmpty())
           {
               _full = false;
               _tail = (_tail + Capacity - 1) % Capacity;
           }
       }
       using value_type = std::optional<ItemType>;  // Used to be able to arbitrate away implementation in Sensor
   private:
       std::array<ItemType, Capacity> _buffer;
       uint16_t _tail = 0;
       uint16_t _head = 0;
       bool _full = false;
   
       bool _isEmpty() const noexcept { return (!_full && (_tail == _head)); }
   };
   
   template <class ItemType, uint16_t Capacity>
   class Queue_Mutexed : public Queue<ItemType, Capacity>
   {
   public:
       using Queue<ItemType, Capacity>::Queue;
       using Base = Queue<ItemType, Capacity>;
   
       void put(const ItemType& item) noexcept
       {  // This will fail to put() if the buffer is full
           LockGuard lock(_mutex);
           Base::put(item);
       }
   
       void put(ItemType&& item) noexcept
       {  // This will fail to put() if the buffer is full
           LockGuard lock(_mutex);
           Base::put(std::move(item));
       }
   
       std::optional<ItemType> get() noexcept
       {
           LockGuard lock(_mutex);
           return Base::get();
       }
   
       std::optional<ItemType> peek() const noexcept
       {
           LockGuard lock(_mutex);
           return Base::peek();
       }
   
       void reset() noexcept
       {
           LockGuard lock(_mutex);
           Base::reset();
       }
   
       bool isEmpty() const noexcept
       {
           LockGuard lock(_mutex);
           return Base::isEmpty();
       }
   
       bool isFull() const noexcept
       {
           LockGuard lock(_mutex);
           return Base::isFull();
       }
   
       uint16_t capacity() const noexcept { return Base::capacity(); }
   
       uint16_t size() const noexcept
       {
           LockGuard lock(_mutex);
           return Base::size();
       }
   
       void popBack() noexcept
       {
           LockGuard lock(_mutex);
           Base::popBack();
       }
       using value_type = std::optional<ItemType>;  // Used to be able to arbitrate away implementation in Sensor
   private:
       mutable Mutex _mutex;
   };
   
   }  // namespace VN
   
   #endif  // TEMPLATELIBRARY_QUEUE_HPP
