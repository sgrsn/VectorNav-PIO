.. :orphan:

Memory Constrained
##################

The overwhelming use of memory by the SDK is to store measurement data and make it available to the user. After that, it is in the main and FB byte buffers used in packet finding.

Composite Data Memory Reduction
===============================
The amount of memory allocated for a `Composite Data` object must be determined at compile time and, as such, should be allocated for the superset of all the measurements it is desired to hold through the lifetime of the binary file. By default, it consumes memory for all measurements (except the dynamically-sized Gnss SatInfo and Gnss RawMeas) which requires XXX bytes per `Composite Data` object.
In many applications, only a subset of measurements will ever be used, and the rest can safely be disabled upon compile time for significant memory reduction. 

The mechanism to reduce the Composite Data memory usage is in ``Config.hpp``, via the `#define {MEASUREMENTGROUP}_GROUP_ENABLE` statements. These can be set to zero to completely disable the measurement group (as may be the case for the GNSS group for the VN-100, shown below)

```
#define GNSS_GROUP_ENABLE 0
```

.. note::
    When a group is disabled, it is never declared in the `CompositeData` class. Consequently, if the GNSS group were disabled as in the example above, the following would be invalid code and result in a compilation error

    CompositeData compositeData;
    std::cout << std::to_string(compositeData.gnss.TimeStatus.has_value());

    because the GNSS group does not exist as a member of the Composite data class. Any access or reference to the GNSS structure inside the `CompositeData` class is an invalid code.

While many cases allow for the disabling of whole measurement groups, in many others a subset of measurement types in a group is required. To accomplish this, it is possible to enable measurement types bit-by-bit. For example, if only ``InsStatus`` and ``PosEcef`` are required in the ``INS`` group, the relevant line in ``Config.hpp`` would look as follows:

```
#define INS_GROUP_ENABLE (INS_INSSTATUS_BIT | INS_POSECEF_BIT)
```

.. note::
    While the define bits can be set in any order, they must be delimited by the bit-or | operator.

.. note::
    As with the measurement group example above, a measurement type that is not enabled in the preprocessor definition is not a valid member of the corresponding measurement group structure. As such, any code reference to it is invalid code. For example, with the INS_GROUP_ENABLE as defined above, the following is valid code:

    CompositeData compositeData;
    std::cout << std::to_string(compositeData.ins.InsStatus.has_value());
    std::cout << std::to_string(compositeData.ins.PosEcef.has_value());

    whereas the following is invalid code, resulting in a compilation error:

    CompositeData compositeData;
    std::cout << std::to_string(compositeData.ins.PosLla.has_value());

Because a composite data object can only contain enabled measurement types, measurements sent by the sensor that are not enabled may be lost.
If only some of the measurement types in a binary message are enabled, the enabled measurements will be placed on the composite data object and the disabled measurements will be lost (unless another queue is set up to receive these measurements, see :ref:`pages/AdvancedFunctionality:Subscribe to an Unparsed Packet`). If only some of the measurement types in an ASCII message are enabled, no object will be created or added to the ``CompositeDataQueue``.
If there are no ``CompositeData``-enabled measurements in a message, no object will be created or added to the ``CompositeDataQueue``.

In other cases it may be desired to disable measurements which are present in messages from the sensor, but necessary to capture in a lower memory way. To accomplish this, a custom queue filter can be set up to capture the measurements which are composite data disabled. For more information, see :ref:`pages/AdvancedFunctionality:Subscribe to an Unparsed Packet`. 

Queue Size Reduction
====================
.. Upon data dropping, the failedPushCount of the respective queue will be incremented, which can be checked via the `ASDF` api. 

Composite Data Queue
--------------------
Queues are the interface between the listening thread and the user thread, on which all data is placed. By default, the largest queue is the ``CompositeDataQueue``, default-initialized to size 5. The queue sizes are set in ``Config.hpp``. This allows for 5 measurements to be placed on the queue while the application thread works through to process them. To entirely disable the Composite Data queue (eliminating the memory allocation to composite data altogether), the queue size can be set to 0. THe queue can safely be set to size 1, but any size below what can be consumed per loop may result in dropped data. The smaller the queue size, the more likely data is dropped.

Command queue
-------------
If no commands are to be sent or received by the sensor, the command queue capacity can be set to 0, disabling the sending of commands or receiving of responses altogether. Alternatively, if only a single command will be sent at a time (e.g. each command is sent as ``blocking``), the command queue capacity can safely be set to 1 without any side effects. Disabling the command processor altogether from default settings results in a total XXX memory reduction.

Byte buffer size reduction
==========================
The main byte buffer is default initialized to 4096 bytes. So long as the processor can keep up with the incoming serial data, this can be reduced to contain a single serial push at a time. 

It is very dangerous to reduce the byte buffer size beyond what can be consumed by the processor. If the byte buffer is too small, the new bytes will be lost, resulting in a corrupted packet which will never be identified. If this is left to continue, it is possible that no valid packet will be found (as a portion of multiple packets may be dropped per serial push), locking up received communication altogether.

.. Minor
.. =====
.. A few parameters provide very minor memory reduction. Todo documentation.
