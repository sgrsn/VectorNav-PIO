.. :orphan:

Non-Os Usage
############

Custom HAL Class
****************

The SDK is designed to be easily expandable to work on any OS or on non-OS systems. To accomplish this, all hardware-specific code is consolidated to classes within one folder called the hardware abstraction layer (HAL). 
All of the HAL classes are set up similarly, split up between at least 3 files:

#. HALTYPE_Base.hpp
    Contains the abstract interface class for this HAL type, from which the HAL implementation is derived.
#. HALTYPE.hpp
    Contains ``#ifdef`` statements to ``#include`` switch between the correct implementation file for each platform type.
#. HALTYPE_PLATFORMTYPE.hpp
    Contains the actual implementation code for the HAL class. There may be multiple of these per HAL type, with one file per platform type.

To add a new HAL implementation, for each HAL class you need to implement you should:

#. Create a new header file in the Include/HAL folder, matching the HAL type and platform type you need.
#. Define a new class just named HALTYPE (e.g. Serial or Thread) in the file, deriving from the HALTYPE_Base class, overriding and implementing each public method.
#. Add an ``ifdef (XXX)`` statement in HALTYPE.hpp to conditionally include the new file.

.. note::
    While the HAL base class may not be referenced in the code, all the implementation files derive from the base for the purpose of static analysis. Any method declaration errors are much easier to spot when deriving from the abstract base class with the `override <https://en.cppreference.com/w/cpp/language/override>`_ specifier.


Serial
======

:class:`VN::Serial_Base`

Mutex
=====

:class:`VN::Mutex_Base`

Timer
=====

:class:`VN::Timer_Base`

Thread
======

:class:`VN::Thread_Base`

Single-Threaded Operation
*************************

By default, the VnSdk is multi-threaded, where a high-priority listening thread is spawned upon the `connect` call, and joined on the `disconnect` call. This behavior can be disabled via Config.hpp, with the THREADING_ENABLE parameter. 

The high-priority normally handles

#. Polling data from serial port
#. Attempt to find a packet
#. If found, route that packet through to its respective output queue, parsing if applicable

In most applications no special care needs to be taken, as all blocking calls automatically manage those two functions. For example, a function which is only interested in asynchronous measurement output, content to block until the next received measurement, can safely run as:

.. code-block:: cpp
   :linenos:

    while (true) {
        auto nextMeasurement = sensor.getNextMeasurement();
        if (nextMeasurement.has_value()) {
            // Identify composite data object and pass to respective listeners as before.
        } else {
            // Measurement timed out, handle case
        }
        // ... Do other system-level things
    }

Because the `getNextMeasurement` call is blocking, it will manage polling the serial and pushing packets through the pipeline until a measurement is found. The same holds true for any commands to the sensor (including read/write register): so long as the call to send the command is blocking, no special code needs to be added.

If it is unacceptable that a blocking call is used (for example where other system control inputs are necessary), the serial polling and triggering of packet identification/routing must be handled explicitly. To this end, there are two methods available only when threading is disabled: `loadMainBufferFromSerial` and `processNextPacket`. 

To avoid data drops, best practice is to 

.. code-block:: cpp
   :linenos:
   :emphasize-lines: 5, 7

    while (true) {
        
        // ... Do system-level work

        const bool needsMoreData = sensor.processNextPacket();
        if (needsMoreData) {
            sensor.loadMainBufferFromSerial();
        } else {
            auto nextMeasurement_maybe = sensor.getNextMeasurement(false);
            if (nextMeasurement_maybe.has_value()) {
                // ... Handle next measurmenet
        }
    }

some methods are no longer const
